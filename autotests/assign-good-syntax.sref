$ENTRY Go { = <Go1> <Go2> <Go3> <Go4>; }


// assign-dry-run.sref

Go1 { = : =  ; }


// assign-nested.sref

Go2 {
  = <<NameNestedAssigns ('main') 'assigns'> #ID>: 'main=' #ID
  = <TestAssign2 'def'>: [TestAssign2 s.Func1] (s.Func2) s.Func3
  = <s.Func1 'ghi'>: 'defghi'
  = <s.Func2 'abc'>: 'abcdef'
  = <s.Func3 'abc+ghi'>: 'abcdefghi'
  = /* пусто */;
}

NameNestedAssigns {
  (e.MainName) e.Assigns
    = {
        s.AssignId
          = e.MainName '=' s.AssignId: e.MainName^
          = e.MainName;
      };
}

TestAssign2 {
  e.Closured
    = [TestAssign2
        {
          e.Arg
            = e.Closured e.Arg: e.Sum
            = e.Sum;
        }
      ]
      (
        {
          e.Arg
            = e.Arg e.Closured: e.Sum
            = e.Sum;
        }
      )
      <AsIs
        {
          e.Arg1 '+' e.Arg2
            = e.Arg1 e.Closured e.Arg2: e.Sum
            = e.Sum;
        }
      >;
}

AsIs { e.X = e.X; }


// assign-semantic.sref

F { e.X e.Z = e.X : e.X^ = e.Z ; }
Eq { e.X (e.X) = ; }

Go3 {
  = <Eq <F 'aaa'> ('aaa')>;
}


// assigns-hard.sref

Go4 {
  =
    <Eq
      <Num
        (#Binary
          (#Value 's')
          (#Unary
            (#Value 't')
          )
        )
      >
      (
        (#Binary
          (#Value 1 's')
          (#Unary
            (#Value 2 't')
          )
        )
      )
    >;
}

Num {
  t.Tree
    = <NumRec 1 t.Tree> : s.Num t.Tree^
    = t.Tree;
}

NumRec {
  s.Num (#Value s.Value)
    = <I s.Num> (#Value s.Num s.Value);

  s.Num (#Unary t.Tree)
    = <NumRec s.Num t.Tree> : s.Num^ t.Tree^
    = s.Num (#Unary t.Tree);

  s.Num (#Binary t.Left t.Right)
    = <NumRec s.Num t.Left> : s.Num^ t.Left^
    = <NumRec s.Num t.Right> : s.Num^ t.Right^
    = s.Num (#Binary t.Left t.Right);
}

I {
  1 = 2;
  2 = 3;
}
