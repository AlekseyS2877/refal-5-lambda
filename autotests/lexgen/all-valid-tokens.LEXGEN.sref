$ENTRY Go {
  = <CheckForErrors <Root () <ValidInput>>>;
}

CheckForErrors {
  e.Tokens =
    <CheckForErrors-Aux
      (
        #TkUnexpected #TokenError
        #TokenLexerInternalError-Unexpected
        #TokenLexerInternalError-UnexpectedEOF
      )
      e.Tokens
    >;
}

CheckForErrors-Aux {
  (e.ErrorTags-B s.ErrorTag e.ErrorTags-E)
  e.Tokens-B (s.ErrorTag e.Info) e.Tokens-E =
    <CheckForErrors-Fail
      s.ErrorTag (e.Tokens-B) (s.ErrorTag e.Info) (e.Tokens-E)
    >;

  (e.ErrorTags) e.Tokens =
    /* всё в порядке */;
}

$ENUM CheckForErrors-Fail;

ValidInput {
  =
    '%%\n'
    'int x = 0;\n'
    '%%\n'
    '\n'
    '// Все возможные токены для компилятора версии 1.λ.11\n'
    '\n'
    '/*\n'
    '  Регулярно обновлять при изменении лексики языка!!!\n'
    '*/\n'
    '\n'
    '$ENUM E;\n'
    '$EENUM EE;\n'
    '\n'
    '$ENTRY Go {\n'
    '  e.Empty =\n'
    '    = <Check <Emit>>\n'
    '    : /* пусто */\n'
    '    = <S (<ES [E EE #L #A #B #E #L 1000]>)>;\n'
    '\n'
    '  t.X^ s.Y = ;\n'
    '}\n'
    '\n'
    '$EXTERN Go;\n'
    '$FORWARD Emit;\n'
    '$SWAP S;\n'
    '$ESWAP ES;\n'
    '$LABEL L, A, B, E, L;\n'
    '\n'
    '%%\n'
    'int y = 0;\n'
    '%%\n'
    '\n'
    'Check {\n'
    '  ''\\d32\\D032\\d10\\d13\\d9\\d09\\d009\\d7\\d8\\d12\\d11\\d1\\d2!'' = ;\n'
    '}\n'
    '\n'
    'Emit {\n'
    '  = ''  \\n\\r\\t\\t\\t\\a\\b\\f\\v\\x01\\X02!'';\n'
    '}\n'
    '\n'
    '%%\n'
    'int z = 0;\n'
    '%%\n';
}

/*GEN:TOKENS

  :UpLetter: = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
  :LoLetter: = 'abcdefghijklmnopqrstuvwxyz'.
  :Digit: = '0123456789'.
  :ODigit: = '01234567' .
  :XDigit: = '0123456789ABCDEFabcdef' .
  :Punctuation: = '<>(){}[]=;:,#^'.

  :StartIdentifier: = :UpLetter:.
  :TailIdentifier: = :UpLetter: :LoLetter: :Digit: '_-'.
  :VarName: = :TailIdentifier:.
  :VarMode: = 'set'.
  :DirectiveBody: = :UpLetter:.
  :Space: = ' \t\r'.

  :Other: = :Any:.


  Root =
    '%'     !-                                  StartNative-Percent       |
                                                Main                      .

  Main =
    :Space:               !-                    Main                      |
    :Punctuation:         !#TkPunctuation       Main                      |
    :StartIdentifier:                           Name                      |
    :VarMode:                                   VariableStart             |
    :Digit:                                     Number                    |
    '$'                   !-                    Directive                 |
    '\''                  !-                    StringLiteral-Start       |
    '/'                                         StartComment              |
    '\n'                  !#TkNewLine           Root                      |
                          !#TkEOF                                         |
    :Other:               !#TkUnexpected        Main                      .

  Name =
    :TailIdentifier:                            Name                      |
            !#TkName                            Main                      .

  Number =
    :Digit:                                     Number                    |
            !#TkNumber                          Main                      .

  VariableStart =
    '.'                                         VariableIndex             |
            !"Expected dot"                     Main                      .

  VariableIndex =
    :VarName:                                   VariableIndexTail         |
            !"Expected variable name"           Main                      .

  VariableIndexTail =
    :VarName:                                   VariableIndexTail         |
            !#TkVariable                        Main                      .

  Directive =
    :DirectiveBody:                             DirectiveTail             |
            !"Expected directive name"          Main                      .

  DirectiveTail =
    :DirectiveBody:                             DirectiveTail             |
            !#TkDirective                       Main                      .

  StringLiteral-Start =
    '\''    !#TkLiteral-Char                    Main                      |
                                                StringLiteral             .

  StringLiteral =
    '\\'    !-                                  StringLiteral-Escape      |
    '\''    !-                                  StringLiteral-Quote       |
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected EOF in string literal"                           |
    :Any:   !#TkLiteral-Char                    StringLiteral             .

  StringLiteral-Escape =
    'n'     !#TkLiteral-NewLine                 StringLiteral             |
    'r'     !#TkLiteral-CarriageReturn          StringLiteral             |
    't'     !#TkLiteral-Tab                     StringLiteral             |
    'a'     !#TkLiteral-Bell                    StringLiteral             |
    'b'     !#TkLiteral-BS                      StringLiteral             |
    'f'     !#TkLiteral-FF                      StringLiteral             |
    'v'     !#TkLiteral-VT                      StringLiteral             |
    '\\'    !#TkLiteral-Char                    StringLiteral             |
    '\''    !#TkLiteral-Char                    StringLiteral             |
    '"'     !#TkLiteral-Char                    StringLiteral             |
    'd'     !-                                  StringLiteral-Escape-Code |
    'D'     !-                                  StringLiteral-Escape-Code |
    :ODigit:                                    StringLiteral-Escape-OCode|
    'x'     !-                                  StringLiteral-Escape-XCode|
    'X'     !-                                  StringLiteral-Escape-XCode|
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected escape sequence"       StringLiteral             .

  StringLiteral-Escape-Code =
    :Digit:                                     SL-E-C1                   |
            !"Expected decimal digit"           StringLiteral             .

  SL-E-C1 =
    :Digit:                                     SL-E-C2                   |
            !#TkLiteral-Code                    StringLiteral             .

  SL-E-C2 =
    :Digit: !#TkLiteral-Code                    StringLiteral             |
            !#TkLiteral-Code                    StringLiteral             .

  StringLiteral-Escape-OCode =
    :ODigit:                                    SL-E-OC1                  |
            !#TkLiteral-OCode                   StringLiteral             .

  SL-E-OC1 =
    :ODigit:!#TkLiteral-OCode                   StringLiteral             |
            !#TkLiteral-OCode                   StringLiteral             .

  StringLiteral-Escape-XCode =
    :XDigit:                                    StringLiteral-Escape-XCode|
            !#TkLiteral-XCode                   StringLiteral             .

  StringLiteral-Quote =
    '\''    !#TkLiteral-Char                    StringLiteral             |
                                                Main                      .

  StartComment =
    '*'     !-                                  CComment                  |
    '/'     !-                                  CppComment                |
            !#TkUnexpected                      Main                      .

  CComment =
    '/'     !-                                  CComment-CheckNested      |
    '*'     !-                                  CComment-CheckEnd         |
    '\n'    !#TkNewLine                         CComment                  |
    :Any:   !-                                  CComment                  |
            !"Unexpected EOF: unclosed comment" Main                      .

  CComment-CheckNested =
    '*'     !"Nested comments is disabled"      CComment                  |
                                                CComment                  .

  CComment-CheckEnd =
    '/'     !-                                  Main                      |
                                                CComment                  .

  CppComment =
    '\n'    !#TkNewLine                         Main                      |
            !#TkEOF                                                       |
    :Any:   !-                                  CppComment                .

  StartNative-Percent =
    '%'     !-                                  StartNative-NewLine       |
            !"Native inlines expects two percents"
                                                Main                      .

  StartNative-NewLine =
    '\r'    !-                                  StartNative-NewLine       |
    '\n'    !#TkNewLine                         Native-Begin              |
            !"Native inlines expects new line after two percents"
                                                Main                      .

  Native-Begin =
    '%'                                         Native-CheckEnd           |
                                                Native                    .

  Native =
    '\n'    !#TkNativeLine                      Native-Begin              |
    :Any:                                       Native                    |
            !"Unexpected EOF: unclosed native insertion"
                                                Main                      .

  Native-CheckEnd =
    '%'                                         Native-CheckEnd2          |
                                                Native                    .

  Native-CheckEnd2 =
    '\r'                                        Native-CheckEnd2          |
    '\n'    !#TkNewLine                         Main                      |
                                                Native                    .
GEN:END*/
