/*
  Генератор лексических анализаторов.
*/

//FROM Version
$EXTERN PrintVersion;

//FROM LibraryEx
$EXTERN ArgList, Fetch, Pipe, LoadFile, SaveFile, Map, Inc, MapReduce;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

//FROM DFA-Lexer
$EXTERN DFA-Tokens;

//FROM DFA-Parser
$EXTERN DFA-Parse;

//FROM DFA-Compiler
$EXTERN DFA-Compile;

//FROM Generator
$EXTERN GenerateFromDFA;

//FROM Error
$EXTERN ErrorAt;

//FROM Flex-Lexer
$EXTERN Flex-Tokens;

//FROM Flex-Parser
$EXTERN Flex-Parse;

//FROM Flex-Checker
$EXTERN Flex-Check;

//FROM Flex-Desugar
$EXTERN Flex-Desugar;

$ENTRY Go {
  = <PrintVersion 'LexGen'>
    <Fetch
      <ArgList>
      <Pipe
        {
          (e.ProgName) e.Options =
            <ParseCommandLine e.Options>;
        }
        {
          #InPlace e.FileName =
            <SaveFile
              (e.FileName)
              <Transform (e.FileName) <LoadFile e.FileName>>
            >;

          #From (e.From) #To (e.To) =
            <SaveFile
              (e.To)
              ('/* Automatically generated file, don\'t edit! */')
              ('/* Edit file \'' e.From '\' */')
              ()
              ()
              <Transform (e.From) <LoadFile e.From>>
            >;

          #BadCommandLine =
            /* ничего не делаем, CheckOption уже вывел сообщение об ошибке */;
        }
      >
    >;
}

Transform {
  (e.Source) e.Lines =
    <Fetch
      e.Lines
      <Pipe
        {
          e.LinesBefore ('/*GEN:' e.GenMode) e.DescriptionAndTail =
            (<Length-T e.LinesBefore ('/*GEN:' e.GenMode)>)
            (e.GenMode)
            e.DescriptionAndTail;

          e.Other = <ErrorAt (1 e.Source) 'Lexer description not found'>;
        }
        {
          (s.Length e.LinesBefore) (e.GenMode)
          e.Description ('GEN:END*/') e.Deleted =
            (s.Length e.LinesBefore) (e.GenMode) e.Description;

          (s.Length e.LinesBefore) (e.GenMode)
           e.Other =
             <ErrorAt (s.Length e.Source) 'End of description not found'>;
        }
        {
          (s.Length e.LinesBefore) ('TOKENS') e.Description =
            <Fetch
              s.Length e.Description
              <Pipe
                DFA-Tokens
                (Map
                  {
                    (#TError s.LineNumber e.Text) =
                      <ErrorAt (s.LineNumber e.Source) e.Text>;

                    (s.TokType s.LineNumber e.Info) =
                      (s.TokType (s.LineNumber e.Source) e.Info);
                  }
                )
                DFA-Parse
                DFA-Compile
                GenerateFromDFA
                {
                  e.Generated =
                    e.LinesBefore
                    e.Description
                    ('GEN:END*/')
                    e.Generated;
                }
              >
            >;

          (s.Length e.LinesBefore) ('FLEX') e.Description =
            <Fetch
              s.Length e.Description
              <Pipe
                Flex-Tokens
                (Map
                  {
                    (#TError s.LineNumber e.Text) =
                      <ErrorAt (s.LineNumber e.Source) e.Text>;

                    (s.TokType s.LineNumber e.Info) =
                      (s.TokType (s.LineNumber e.Source) e.Info);

                    t.Other = t.Other;
                  }
                )
                Flex-Parse
                {
                  e.AST =
                    <Flex-Check e.AST>
                    e.AST;
                }
                Flex-Desugar
                Flex-Compile
                /* GenerateFromDFA */
                {
                  e.Generated =
                    e.LinesBefore
                    e.Description
                    ('GEN:END*/')
                    e.Generated;
                }
              >
            >;

          (s.Length e.LinesBefore) (e.OtherGenMode) e.Description =
            <ErrorAt
              (s.Length e.Source) 'Unknown generation mode ' e.OtherGenMode
            >;
        }
      >
    >;
}

Flex-Compile {
  e.AnyInput =
    /* пусто */;
}

Length-T {
  e.Lines =
    <MapReduce
      {
        s.Next (e.Line) = <Inc s.Next> (e.Line);
      }
      0 e.Lines
    >;
}
