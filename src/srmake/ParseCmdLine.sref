//FROM LibraryEx
$EXTERN Fetch, Pipe, MapReduce, Map;

//FROM GetOpt
$EXTERN GetOpt;

//FROM Config
$EXTERN
  Config-Create,
  Config-SetCppCompilerExe,
  Config-SetCppCompilerLib,
  Config-SetPrefix,
  Config-AddReference,
  Config-AddFolder,
  Config-SetSrefCompiler,
  Config-AddSrefCompilerFlag,
  Config-SetTargetFileName,
  Config-SetTargetMode,
  Config-SetPrelude,
  Config-AddRuntimeFile,
  Config-SetSourceFile;

/**
  <ParseCommandLine e.Arguments>
    == #Success t.Config
    == #Fails (s.ArgNum e.Message)*

  e.Folders ::= (s.FolderType e.Path)*
  s.FolderType ::= #Search | #Runtime
  t.Target ::= (e.TargetFile) | #DefaultTarget
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (#CppCompilerExe #Required 'c' ('cpp-command') ('cpp-command-exe'))
          (#CppCompilerLib #Required ('cpp-command-lib'))
          (#Prefix #Required 'p' ('prefix'))
          (#Reference #Required 'r' ('reference'))
          (#RuntimeFolder #Required 'D' ('runtime-dir') ('runtime-directory'))
          (#SearchFolder #Required 'd' ('dir') ('directory'))
          (#SrefCompiler #Required 's' ('sref-command'))
          (#SrefCompilerOption #Required 'X' ('thru') ('through'))
          (#TargetFileName #Required 'o' ('target-file'))
          (#TargetMode-Exe #None 'x' ('makeexe'))
          (#TargetMode-Lib #None 'l' ('makelib'))
          (#TargetMode-R #None 'R')
          (#TargetMode-C #None 'C' ('compile-only'))
          (#Prelude #Required ('prelude'))
          (#Runtime #Required ('runtime'))
        )
        e.Arguments
      >
      <Pipe
        (CheckRequiredOptions (#FILE))
        {
          (e.Errors) e.Options
            = (<Config-Create> e.Errors) e.Options;
        }
        (MapReduce
          {
            (t.Config e.Errors) (#CppCompilerExe s.Num e.CppCompilerExe)
              = <Update
                  t.Config (e.Errors)
                  Config-SetCppCompilerExe s.Num e.CppCompilerExe
                >;

            (t.Config e.Errors) (#CppCompilerLib s.Num e.CppCompilerLib)
              = <Update
                  t.Config (e.Errors)
                  Config-SetCppCompilerLib s.Num e.CppCompilerLib
                >;

            (t.Config e.Errors) (#Prefix s.Num e.Prefix)
              = <Update t.Config (e.Errors) Config-SetPrefix s.Num e.Prefix>;

            (t.Config e.Errors) (#Reference s.Num e.Reference)
              = <Update
                  t.Config (e.Errors) Config-AddReference s.Num e.Reference
                >;

            (t.Config e.Errors) (#RuntimeFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) Config-AddFolder s.Num #Runtime e.Folder
                >;

            (t.Config e.Errors) (#SearchFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) Config-AddFolder s.Num #Search e.Folder
                >;

            (t.Config e.Errors) (#SrefCompiler s.Num e.SrefCompiler)
              = <Update
                  t.Config (e.Errors)
                  Config-SetSrefCompiler s.Num e.SrefCompiler
                >;

            (t.Config e.Errors) (#SrefCompilerOption s.Num e.Flag)
              = <Update
                  t.Config (e.Errors) Config-AddSrefCompilerFlag s.Num e.Flag
                >;

            (t.Config e.Errors) (#TargetFileName s.Num e.TargetFile)
              = <Update
                  t.Config (e.Errors)
                  Config-SetTargetFileName s.Num e.TargetFile
                >;

            (t.Config e.Errors) (#TargetMode-Exe s.Num)
              = <Update t.Config (e.Errors) Config-SetTargetMode s.Num #EXE>;

            (t.Config e.Errors) (#TargetMode-Lib s.Num)
              = <Update t.Config (e.Errors) Config-SetTargetMode s.Num #LIB>;

            (t.Config e.Errors) (#TargetMode-R s.Num)
              = <Update t.Config (e.Errors) Config-SetTargetMode s.Num #R>;

            (t.Config e.Errors) (#TargetMode-C s.Num)
              = <Update
                  t.Config (e.Errors) Config-SetTargetMode s.Num #CompileOnly
                >;

            (t.Config e.Errors) (#Prelude s.Num e.Prelude)
              = <Update t.Config (e.Errors) Config-SetPrelude s.Num e.Prelude>;

            (t.Config e.Errors) (#Runtime s.Num e.File)
              = <Update t.Config (e.Errors) Config-AddRuntimeFile s.Num e.File>;

            (t.Config e.Errors) (#FILE s.Num e.SourceFile)
              = <Update
                  t.Config (e.Errors) Config-SetSourceFile s.Num e.SourceFile
                >;

            (t.Config e.Errors) t.Option
              = (t.Config e.Errors) t.Option;
          }
        )
        {
          (t.Config /* нет ошибок */) =
            #Success t.Config;

          (t.Config e.Errors) =
            #Fails
            <Map
              {
                (s.Pos #NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos #UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos #UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                // У нас все опции с параметрами, не должно возникать
                // (s.Pos #UnexpectedLongOptionParam (e.Option) e.Param) =

                (s.Pos #ManySourceFiles) =
                  (s.Pos 'many source files in command line');

                (s.Pos #No #FILE) =
                  (s.Pos 'expected source filename in command line');

                (s.Pos #TargetModeAlreadySet)
                  = (s.Pos
                      'options --makeexe (-x), --makelib (-l) and -R '
                      'must appear one time'
                    );
              }
              e.Errors
            >;
        }
      >
    >;
}

CheckRequiredOptions {
  (s.Flag e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
    = <CheckRequiredOptions
        (e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
      >;

  (s.Flag e.Required) (e.Errors) e.Options
    = <CheckRequiredOptions
        (e.Required) (e.Errors (1 #No s.Flag)) e.Options
      >;

  (/* пусто */) (e.Errors) e.Options
    = (e.Errors) e.Options;
}

Update {
  t.Config (e.Errors) s.Updater s.LineNum e.Option
    = <Fetch
        <s.Updater t.Config e.Option>
        {
          #Success t.Config^ = (t.Config e.Errors);

          #Fails e.ErrorMessage
            = (t.Config e.Errors (s.LineNum e.ErrorMessage));
        }
      >;
}
