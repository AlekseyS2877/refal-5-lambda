*$FROM Version
$EXTERN PrintVersion;

*$FROM LibraryEx
$EXTERN ArgList, Map;

*$FROM ParseCmdLine
$EXTERN ParseCommandLine;

*$FROM FileScanner
$EXTERN CreateFileList;

*$FROM Config
$EXTERN
  Config-GetFolders,
  Config-GetSourceFile,
  Config-GetRuntimeFiles,
  Config-GetSrefCompiler,
  Config-GetCppCompilerExe,
  Config-GetCppCompilerLib,
  Config-GetPrefix,
  Config-GetReferences,
  Config-GetPrelude,
  Config-GetTargetMode,
  Config-GetTargetFileName,
  Config-GetIncorporateds;


$ENTRY Go { = <PrintVersion 'SRMake'> <Main <ArgList>>; }

Main {
  (e.Program)
    = <Prout 'Usage:'>
      <Prout '  srmake flags... MainFileName[.sref]'>
      <Prout>
      <Prout 'flags:'>
      <Prout '   [-s path\\to\\srefc.exe]'>
      <Prout '   -c c++compiler'>
      <Prout '   {-d search-dir}'>
      <Prout '   [-o target]'>
      <Prout '   -X flags-for-srefc'>;

  (e.Program) e.Arguments
    = <MakeProject
        <ParseCommandLine e.Arguments>
      >;
}

MakeProject {
  Success t.Config
    = <Map
        {
          (s.FolderTag e.Folder) = (e.Folder);
        }
        <Config-GetFolders t.Config>
      >
    : e.Folders
    = <Config-GetSourceFile t.Config> : e.SourceFile
    = <Config-GetRuntimeFiles t.Config> : e.RuntimeFiles
    = <CreateFileList t.Config (e.SourceFile) e.RuntimeFiles>
    : t.Config^ e.Units
    = <RunSrefCompiler t.Config e.Units>;

  Fails e.Errors
    = <Map
        {
          (s.Pos e.Message) =
            <Prout 'Command line argument ' <Symb s.Pos> ': ' e.Message>;
        }
        e.Errors
      >
      <Exit 1>;
}

PrintSrcPos {
  CMD-LINE = 'command line';
  (s.LineNum e.FileName) = e.FileName ':' <Symb s.LineNum>;
}

RunSrefCompiler {
  t.Config e.Units-B (Error t.SrcPos e.Message) e.Units-E
    = <Map
        {
          (Error t.SrcPos^ e.Message^) =
            <Prout <PrintSrcPos t.SrcPos> ': ' e.Message>;

          (Output e.Output) = ;
          (OutputWithNative (e.Output) e.Native) = ;
          (Source (s.Dialect e.Source) e.Output) = ;
          (Include e.Include) = ;
        }
        (Error t.SrcPos e.Message) e.Units-E
      >
      <Exit 1>;

  t.Config e.Units
    = <Config-GetSrefCompiler t.Config> : e.SrefCompiler
    = <MakeOptionalFlag &Config-GetCppCompilerExe t.Config 'cpp-command-exe'>
    : e.CppCompilerExe
    = <MakeOptionalFlag &Config-GetCppCompilerLib t.Config 'cpp-command-lib'>
    : e.CppCompilerLib
    = <MakeTargetModeFlag t.Config> : e.TargetModeFlag
    = <MakeTargetFileFlag t.Config> : e.TargetFileFlag
    = <MakeSearchFolderFlags t.Config> : e.SearchFolderFlags
    = <GetPrefix t.Config> : e.Prefix
    = <Config-GetReferences t.Config> : e.References
    = <Config-GetIncorporateds t.Config> : e.IncorporatedLibs
    = <Config-GetPrelude t.Config> : e.Prelude
    = <System
        e.SrefCompiler
        e.TargetModeFlag
        e.CppCompilerExe
        e.CppCompilerLib
        e.TargetFileFlag
        e.SearchFolderFlags
        ' --prefix="' e.Prefix '"'
        ' --prelude="' e.Prelude '"'
        <Map
          {
            (e.Reference) = ' --reference="' e.Reference '"';
          }
          e.References
        >
        <Map
          {
            (e.LibName) = ' --incorporated="' e.LibName '"';
          }
          e.IncorporatedLibs
        >
        <Map
          {
            (Output e.Output) = ' "' e.Output '"';
            (OutputWithNative (e.Output) e.Native) = ' "' e.Output '"';
            (Source (s.Dialect e.Source) e.Output) = ' "' e.Source '"';
            (Include e.Include) = /* пусто */;
          }
          e.Units
        >
      >
    : {
        0 = /* пусто */;

        s.RetCode
          = <Prout 'ERROR: srefc-core returned code ' <Symb s.RetCode>>
            <Exit 1>;
      };
}

MakeOptionalFlag {
  s.Getter t.Config e.LongOptionName
    = <s.Getter t.Config>
    : {
        /* empty */ = /* empty */;
        e.Value = ' --' e.LongOptionName '="' e.Value '"';
      };
}

MakeTargetModeFlag {
  t.Config
    = <Config-GetTargetMode t.Config>
    : {
        DefaultEXE = /* пусто */;
        EXE = ' --makeexe';
        LIB = ' --makelib';
        R = ' -R';
        CompileOnly = ' --compile-only';
      };
}

MakeTargetFileFlag {
  t.Config
    = <Config-GetTargetFileName t.Config>
    : {
        DefaultTarget = /* пусто */;
        e.TargetFile = ' --target-file="' e.TargetFile '"';
      };
}

MakeSearchFolderFlags {
  t.Config
    = <Map
        {
          (Search e.Folder) = ' --directory="' e.Folder '"';
          (Runtime e.Folder) = ' --runtime-directory="' e.Folder '"';
        }
        <Config-GetFolders t.Config>
      >;
}

GetPrefix {
  t.Config
    = <Config-GetPrefix t.Config>
    : {
        NotSet = /* пусто */;
        e.Prefix = e.Prefix;
      };
}
