//FROM LibraryEx
$EXTERN Map, Fetch, UnBracket, Inc;

//FROM Library
$EXTERN Lenw, Mul, Sub, Ord, Div, Mod;

//FROM DisplayName
$EXTERN DisplayName;

//FROM Opcodes
$EXTERN NumberFromOpcode, NumberFromBracket, BlockTypeNumber;


$ENTRY GenProgram-RASL {
  (
    (#ModuleID s.Cookie1 s.Cookie2)
    (#CmdFuncArray s.FunctionCount e.FuncNames)
    (#CmdLabelArray s.LabelCount e.Labels)
    (#CmdNumberArray s.NumberCount e.Numbers)
    (#CmdStringArray s.StringCount e.Strings)
    (#RASL e.RASL)
    (#Items e.Items)
  )

    = <Lenw <BytesFromFunctionList e.FuncNames>>
    : s.ExternalSize e.FuncNamesAsBytes

    = <Lenw <BytesFromLabelList e.Labels>>
    : s.IdentSize e.IdentsAsBytes

    = <Lenw <BytesFromStringList e.Strings>>
    : s.StringSize e.StringsAsBytes

    = <Lenw <Map GenCommand-RASL e.RASL>>
    : s.RaslLength e.RASLAsBytes

    = <PutBlock #Start <BytesFromString 'RASLCODE'>>
      <PutBlock
        #ConstTable
        <PutWordLE s.Cookie1>
        <PutWordLE s.Cookie2>
        <PutWordLE s.FunctionCount>
        <PutWordLE s.LabelCount>
        <PutWordLE s.NumberCount>
        <PutWordLE s.StringCount>
        <PutWordLE s.RaslLength>
        <PutWordLE s.ExternalSize>
        <PutWordLE s.IdentSize>
        <PutWordLE <Sub s.StringSize <Mul 4 s.StringCount>>>
        e.FuncNamesAsBytes
        e.IdentsAsBytes
        <Map PutWordLE e.Numbers>
        e.StringsAsBytes
        <Map UnBracket e.RASLAsBytes>
      >
      <Map GenCommand-Globals e.Items>;
}

BytesFromFunctionList {
  e.FuncNames =
    <Map
      {
        (s.ScopeClass e.FuncName) =
          <NameWithSign-Bytes s.ScopeClass e.FuncName>;
      }
      e.FuncNames
    >;
}

BytesFromLabelList {
  e.Labels =
    <Map
      {
        (e.Ident) = <Asciiz <DisplayName e.Ident>>;
      }
      e.Labels
    >;
}

BytesFromStringList {
  e.Strings =
    <Map
      {
        (e.String) =
          <Fetch
            <Lenw e.String>
            {
              s.Length e.String^ =
                <PutWordLE s.Length> <BytesFromString e.String>;
            }
          >;
      }
      e.Strings
    >;
}

BytesFromString {
  e.String = <Map Ord e.String>;
}

Asciiz {
  e.String = <BytesFromString e.String> 0;
}

PutBlock {
  s.Type e.Bytes =
    <BlockTypeNumber s.Type>
    <Fetch
      <Lenw e.Bytes>
      {
        s.Length e.Bytes^ = <PutWordLE s.Length> e.Bytes;
      }
    >;
}

PutWordLE {
  s.1 s.2 s.3 s.4 = s.1 s.2 s.3 s.4;

  e.Bytes s.Value = <PutWordLE e.Bytes <Mod s.Value 256> <Div s.Value 256>>;
}

NameWithSign-Bytes {
  #GN-Entry e.Name = <Asciiz '*' <DisplayName e.Name>>;
  #GN-Local e.Name = <Asciiz '#' <DisplayName e.Name>>;
}

GenCommand-Globals {
  (#CmdEnumDescr s.ScopeClass e.Name) =
    <PutBlock #EmptyFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (#CmdInterpretFuncDescr s.ScopeClass e.Name s.Offset) =
    <PutBlock
      #RefalFunction
      <NameWithSign-Bytes s.ScopeClass e.Name>
      <PutWordLE s.Offset>
    >;

  (#CmdSwapDescr s.ScopeClass e.Name) =
    <PutBlock #Swap <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (#CmdNativeFuncDescr s.ScopeClass e.Name) =
    <PutBlock #NativeFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;
}

GenCommand-RASL {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (#CmdProfileFunction) =
    <PutCommand #CmdProfileFunction>;

  (#CmdLoadConstants) =
    <PutCommand #CmdLoadConstants>;

  (#CmdIssueMemory s.Memory) =
    <PutCommand #CmdIssueMemory s.Memory 0 0>;

  (#CmdReserveBacktrackStack s.Depth) =
    <PutCommand #CmdReserveBacktrackStack s.Depth 0 0>;

  (#CmdOnFailGoTo s.Offset) =
    <PutCommand #CmdOnFailGoTo s.Offset 0 0>;

  (#CmdProfilerStopSentence) =
    <PutCommand #CmdProfilerStopSentence>;

  (#CmdInitB0) =
    <PutCommand #CmdInitB0>;

  (#CmdInitB0-Lite) =
    <PutCommand #CmdInitB0-Lite>;

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (режим интерпретации)

  (#CmdChar s.Direction s.BracketNumber s.Char) =
    <PutCommand (#CmdChar s.Direction) 0 <Ord s.Char> s.BracketNumber>;

  (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    <PutCommand
      (#CmdCharSave s.Direction) s.SaveOffset <Ord s.Char> s.BracketNumber
    >;

  (#CmdNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand (#CmdNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber>;

  (#CmdHugeNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdHugeNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand
      (#CmdHugeNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber
    >;

  (#CmdName s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdName s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand (#CmdNameSave s.Direction) s.SaveOffset s.NameId s.BracketNumber>;

  (#CmdIdent s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdIdent s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand
      (#CmdIdentSave s.Direction) s.SaveOffset s.NameId s.BracketNumber
    >;

  (#CmdBrackets s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBrackets s.Direction) 0 s.NumRanges s.Num>;

  (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBracketsSave s.Direction) 0 s.NumRanges s.Num>;

  (#CmdADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand (#CmdADT s.Direction) s.NameId s.InnerBrackets s.BracketNumber>;

  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand
      (#CmdADTSave s.Direction) s.NameId s.InnerBrackets s.BracketNumber
    >;

  (#CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    <PutCommand (#CmdCallSave s.Direction) 0 s.InnerBrackets s.BracketNumber>;

  (#CmdEmpty s.Direction s.Num) =
    <PutCommand #CmdEmpty 0 0 s.Num>;

  (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVar s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVarSave s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    <PutCommand
      (s.Mode #CmdRepeated s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdRepeatedTVarSave
    s.Direction s.BracketNumber s.VarNumber s.SampleNumber
  ) =
    <PutCommand
      ('t' #CmdRepeatedSave s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdEPrepare s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEPrepare 0 s.VarNumber s.BracketNumber>;

  (#CmdEStart s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEStart 0 s.VarNumber s.BracketNumber>;

  (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    <PutCommand #CmdSave 0 s.NewBracketNumber s.OldBracketNumber>;

  (#CmdVariableDebugTable s.StringId s.Offset) =
    <PutCommand #CmdVariableDebugOffset s.StringId 0 s.Offset>;

  // ---------------------------------------------------------------------------
  // Команды построения результата (режим интерпретации)

  (#CmdResetAllocator) =
    <PutCommand #CmdResetAllocator 0 0 0>;

  (#CmdSetRes s.Offset) =
    <Fetch
      s.Offset
      {
        #ARG-BEGIN = <PutCommand #CmdSetResArgBegin>;
        #RIGHT-EDGE = <PutCommand #CmdSetResRightEdge>;

        s.Offset^ = <PutCommand #CmdSetRes 0 0 s.Offset>;
      }
    >;

  (#CmdCopyVar 'e' s.Target s.Sample) =
    <PutCommand #CmdCopyEVar s.Target s.Sample 0>;

  (#CmdCopyVar s.Mode s.Target s.Sample) =
    <PutCommand #CmdCopySTVar s.Target s.Sample 0>;

  (#CmdReinitSVar s.Offset s.Sample) =
    <PutCommand #CmdReinitSVar 0 s.Sample s.Offset>;

  (#CmdCreateElem s.CreateMode s.ElemNumber s.ElementType e.Info) =
    <PutCommand
      (s.CreateMode <CreateCommandTag s.ElementType>)
      0 <CreateCommandInfo s.ElementType e.Info> s.ElemNumber
    >;

  (#CmdLinkBrackets s.Left s.Right) =
    <PutCommand #CmdLinkBrackets s.Left s.Right 0>;

  (#CmdPushStack s.ElemNumber) =
    <PutCommand #CmdPushStack 0 0 s.ElemNumber>;

  (#CmdWrapClosure s.Offset)
    = <PutCommand #CmdWrapClosure 0 0 s.Offset>;

  (#CmdInsertElem s.ElemNumber) =
    <PutCommand #CmdSpliceElem 0 0 s.ElemNumber>;

  (#CmdInsertVar 'e' s.Offset) =
    <PutCommand #CmdSpliceEVar 0 0 s.Offset>;

  (#CmdInsertVar s.Mode s.Offset) =
    <PutCommand #CmdSpliceSTVar 0 0 s.Offset>;

  (#CmdInsertRange s.ElemNumber) =
    <PutCommand #CmdSpliceRange 0 0 s.ElemNumber>;

  (#CmdInsertTile s.BeginOffset s.EndOffset) =
    <PutCommand #CmdSpliceTile s.BeginOffset s.EndOffset 0>;

  (#CmdSpliceToFreeList) =
    <PutCommand #CmdSpliceToFreeList 0 0 0>;

  (#CmdNextStep) =
    <PutCommand #CmdNextStep>;

  (#CmdTrash s.Offset) =
    <Fetch
      s.Offset
      {
        #LEFT-EDGE = <PutCommand #CmdTrashLeftEdge>;

        s.Offset^ = <PutCommand #CmdTrash 0 0 s.Offset>;
      }
    >;

  (#CmdFail) =
    <PutCommand #CmdFail>;
}

PutCommand {
  s.Symbolic =
    (<NumberFromOpcode s.Symbolic> 0 0 0);

  s.Symbolic t.Arg1 t.Arg2 t.Arg3 =
    <PutCommand (s.Symbolic) t.Arg1 t.Arg2 t.Arg3>;

  (e.Symbolic) t.Arg1 t.Arg2 t.Arg3 =
    (<NumberFromOpcode e.Symbolic> t.Arg1 t.Arg2 t.Arg3);
}

CreateCommandTag {
  #ElOpenBracket = #ElBracket;
  #ElOpenADT = #ElBracket;
  #ElOpenCall = #ElBracket;
  #ElCloseBracket = #ElBracket;
  #ElCloseADT = #ElBracket;
  #ElCloseCall = #ElBracket;

  s.Other = s.Other;
}

CreateCommandInfo {
  #ElChar s.Char = <Ord s.Char>;

  #ElName s.NameId = s.NameId;

  #ElNumber s.Number = s.Number;
  #ElHugeNumber s.NumberId = s.NumberId;

  #ElIdent s.NameId = s.NameId;

  #ElString s.StringId = s.StringId;

  #ElClosureHead = 0;
  #ElUnwrappedClosure s.HeadCounter = s.HeadCounter;

  s.Bracket = <NumberFromBracket s.Bracket>;
}
