//FROM LibraryEx
$EXTERN MapReduce, Map;

//FROM Hash
$EXTERN HashLittle2-Chars;

//FROM LowLevelRASL-RASL
$EXTERN LowLevelRASL-RASL;

//FROM LowLevelRASL-Native
$EXTERN LowLevelRASL-Native;

//FROM DisplayName
$EXTERN DisplayName;


/**
  <LowLevelRASL s.GenMode s.DebugInfo (e.SrcName) e.RASLAST>
    == t.RASLModule
    == t.RASLModule t.NativeModule

  s.GenMode ::= #OnlyDirect | #OnlyInterpret
  s.DebugInfo ::= #DebugInfo | #NoDebugInfo
*/
$ENTRY LowLevelRASL {
  s.GenMode s.DebugInfo (e.SrcName) e.ProgramElements

    = <MapReduce
        CalcDigest
        // Числа выбраны случайно: hexdump /dev/urandom
        (<HashLittle2-Chars 4001567069 291363191 <Canonize e.SrcName>>)
        e.ProgramElements
      >
    : (s.Hash1 s.Hash2) e.Items

    = <Map (SetScopeIDs s.Hash1 s.Hash2) e.Items> : e.Items^

    = <Map (MarkFunctionGenMode s.GenMode) e.Items> : e.Items^

    = <LowLevelRASL-RASL s.DebugInfo s.Hash1 s.Hash2 e.Items>
      <LowLevelRASL-Native s.Hash1 s.Hash2 e.Items>;
}

Canonize {
  e.Canonized '\\' e.NotCanonized = e.Canonized '/' <Canonize e.NotCanonized>;
  e.Canonized = e.Canonized;
}

CalcDigest {
  (s.Hash1 s.Hash2) (#Function s.ScopeClass (e.Name) e.Commands) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'R'>)
    (#Function s.ScopeClass (e.Name) e.Commands);

  (s.Hash1 s.Hash2)
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'N'>)
    (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code);

  (s.Hash1 s.Hash2) (#CmdEnum s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'E'>)
    (#CmdEnum s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdSwap s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'S'>)
    (#CmdSwap s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDeclaration s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'D'>)
    (#CmdDeclaration s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name) =
    (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name);

  (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code) =
    (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code);
}

HashFuncName {
  s.Hash1 s.Hash2 s.ScopeClass e.Name s.Sign =
    <HashLittle2-Chars
      s.Hash1 s.Hash2
      <CharFromScopeClass s.ScopeClass> <DisplayName e.Name> s.Sign
    >;
}

CharFromScopeClass {
  #GN-Entry = 'E';
  #GN-Local = 'L';
}

SetScopeIDs {
  s.Hash1 s.Hash2 (#Function s.ScopeClass (e.Name) e.Commands)
    = (#Function
        s.ScopeClass (e.Name)
        <SetScopeIDs-Commands s.Hash1 s.Hash2 e.Commands>
      );

  s.Hash1 s.Hash2 t.OtherItem = t.OtherItem;
}

SetScopeIDs-Commands {
  s.Hash1 s.Hash2 e.Commands
    = <Map (SetScopeIDs-Command s.Hash1 s.Hash2) e.Commands>;
}

SetScopeIDs-Command {
  s.Hash1 s.Hash2
  (#CmdNumber s.Direction s.BracketNum s.Number)
    = (#CmdNumber
        s.Direction s.BracketNum
        <SetScopeIDs-Patch s.Hash1 s.Hash2 s.Number>
      );

  s.Hash1 s.Hash2
  (#CmdNumberSave s.Direction s.BracketNum s.SaveOffset s.Number)
    = (#CmdNumberSave
        s.Direction s.BracketNum s.SaveOffset
        <SetScopeIDs-Patch s.Hash1 s.Hash2 s.Number>
      );

  s.Hash1 s.Hash2
  (#CmdCreateElem s.CreateMode s.ElemNo #ElNumber s.Number)
    = (#CmdCreateElem
        s.CreateMode s.ElemNo
        #ElNumber <SetScopeIDs-Patch s.Hash1 s.Hash2 s.Number>
      );

  s.Hash1 s.Hash2 (#CmdSentence e.SubCommands)
    = (#CmdSentence <SetScopeIDs-Commands s.Hash1 s.Hash2 e.SubCommands>);

  s.Hash1 s.Hash2
  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands)
    = (#CmdOpenELoop
        #AlgLeft s.BracketNum s.VarNumber
        <SetScopeIDs-Commands s.Hash1 s.Hash2 e.SubCommands>
      );

  s.Hash1 s.Hash2 t.OtherCommand = t.OtherCommand;
}

SetScopeIDs-Patch {
  s.Hash1 s.Hash2 #Cookie1 = s.Hash1;
  s.Hash1 s.Hash2 #Cookie2 = s.Hash2;
  s.Hash1 s.Hash2 s.Number = s.Number;
}

MarkFunctionGenMode {
  #OnlyInterpret (#Function s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToRASL s.ScopeClass (e.Name) e.Commands);

  #OnlyDirect (#Function s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToNative s.ScopeClass (e.Name) e.Commands);

  s.GenMode (s.Type e.Info) = (s.Type e.Info);
}
