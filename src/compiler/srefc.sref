//FROM Version
$EXTERN PrintVersion;

//FROM LibraryEx
$EXTERN ArgList, LoadFile, Map, SaveFile, MapReduce, Inc, SaveBytes, LoadBytes;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

//FROM Config
$EXTERN Config-GetLogFile,
  Config-GetTargetFileName, Config-SetTargetFileName, Config-GetErrorFile,
  Config-GetCppCompiler, Config-GetGrammarCheck, Config-GetTargetSuffix,
  Config-GetSearchFolders, Config-GetTargetMode, Config-GetPrefix,
  Config-GetChmodXCommand;

//FROM Log
$EXTERN Log-Init, Log-Final;

//FROM Library
$EXTERN WriteLine, StrFromInt, Exit, Lower, System, ExistFile, FOpen,
  FWriteBytes, FSeek, Mod, FTell, FClose, RemoveFile, RenameFile;

//FROM FindFile
$EXTERN FindFiles;

//FROM Engine
$EXTERN CompileFile, GrammarCheck;


$ENTRY Go {
  = <PrintVersion 'Srefc'> <Main <ArgList>>;
}

Main {
  (e.ProgName) ('@' e.Config)
    = <Main-SwValidCommandLine
        (e.Config) <ParseCommandLine <LoadFile e.Config>>
      >;

  (e.ProgName) e.Arguments
    = <Main-SwValidCommandLine
        #CommandLine <ParseCommandLine e.Arguments>
      >;
}

Main-SwValidCommandLine {
  t.CommandLineSource #Success t.Config /* файлов нет */
    = <ReportErrors
        t.CommandLineSource t.Config (1 'no source files in command line')
      >;

  t.CommandLineSource #Success t.Config e.Files
    = <Log-Init <Config-GetLogFile t.Config>>
      <Main-SwFoundFiles
        t.CommandLineSource t.Config
        <LookupSourceFiles t.Config e.Files>
      >
      <Log-Final>;

  t.CommandLineSource #Fails e.Errors
    = <ReportErrors t.CommandLineSource #NoConfig e.Errors>;
}

ReportErrors {
  t.CommandLineSource t.Config e.Errors
    = <ReportMessages (OnErrors 'Error') t.CommandLineSource t.Config e.Errors>;
}

OnErrors {
  t.Config
    = <CreateErrorFileMark t.Config>
      <Exit 1>;
}

ReportWarnings {
  t.CommandLineSource t.Config e.Warnings
    = <ReportMessages
        (OnWarnings 'Warning') t.CommandLineSource t.Config e.Warnings
      >;
}

OnWarnings {
  t.Config = /* пусто */;
}

ReportMessages {
  (s.FnAfterMessages e.Banner) t.CommandLineSource t.Config e.Messages
    = t.CommandLineSource
    : {
        (e.ConfigFile) = e.ConfigFile ':';
        #CommandLine = 'Command line argument ';
      }
    : e.Prefix
    = <Map
        {
          (s.Pos e.Message)
            = <WriteLine
                e.Prefix <StrFromInt s.Pos> ': ' e.Banner ': ' e.Message
              >;
        }
        e.Messages
      >
      <s.FnAfterMessages t.Config>;
}

CreateErrorFileMark {
  // Вызывается также при ошибке в командной строке, когда t.Config
  // не удалось построить, поэтому #NoConfig
  #NoConfig = /* ничего */;

  t.Config = <CreateErrorFileMark-SwFile <Config-GetErrorFile t.Config>>;
}

CreateErrorFileMark-SwFile {
  #NoErrorFile = /* ничего */;
  #ErrorFile e.FileName = <SaveFile (e.FileName)>;
}

Main-SwFoundFiles {
  t.CommandLineSource t.Config
  e.Files-B (s.Pos #NotFound e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        <Map
          {
            (s.Pos^ #NotFound e.FileName^)
              = (s.Pos 'file ' e.FileName ' is not found');

            (s.Pos^ #Source (s.Dialect e.Source) e.Output) = /* пусто */;
            (s.Pos^ #Output e.Output) = /* пусто */;
            (s.Pos^ #OutputWithNative (e.Output) e.NativeOutput) = /* пусто */;
          }
          (s.Pos #NotFound e.FileName) e.Files-E
        >
      >;

  t.CommandLineSource t.Config e.Files
    = <Main-SwRenamedTargets
        t.CommandLineSource t.Config
        <RenameTargets <Config-GetTargetMode t.Config> e.Files>
      >;
}

Main-SwRenamedTargets {
  t.CommandLineSource
  t.Config
  e.Files-B (s.Pos #Collision e.Collision) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        <Map
          {
            (s.Pos^ #Collision (e.FirstTarget) e.SecondTarget)
              = (
                  s.Pos
                  'files ' e.FirstTarget ' and ' e.SecondTarget ' have same name'
                );

            (s.Pos^ #Source (s.Dialect e.Source) e.Output) = /* пусто */;
            (s.Pos^ #Output e.Output) = /* пусто */;
            (s.Pos^ #OutputWithNative (e.Output) e.NativeOutput) = /* пусто */;
          }
          (s.Pos #Collision e.Collision) e.Files-E
        >
      >;

  t.CommandLineSource
  t.Config
  e.Files
    = <Config-GetGrammarCheck t.Config> : s.GrammarCheck
    = s.GrammarCheck <CompileFiles t.Config s.GrammarCheck e.Files>
    : {
        s.GrammarCheck^ e.Outputs-B #Fails e.Outputs-E
          = <CreateErrorFileMark t.Config>
            <Exit 1>;

        #NormalRun e.Outputs
          = <Link t.CommandLineSource t.Config e.Outputs>;

        #GrammarCheck e.Outputs
          = <WriteLine '** No syntax errors found **'>;
      };
}

//------------------------------------------------------------------------------

CalcTargetFileName {
  s.TargetMode t.Config e.OutputFiles
    = <Config-GetTargetFileName t.Config>
    : {
        #DefaultTargetFileName
          = e.OutputFiles : (#RASL e.FirstFile) e.OtherFiles
          = <GetLastPartName e.FirstFile> : e.LastPartName
          = <Lower e.LastPartName> : e.LowerBaseName '.rasl'    // assert
          = e.LastPartName : e.BaseName '.' s.R s.A s.S s.L
          = e.BaseName <Config-GetTargetSuffix t.Config s.TargetMode>;

        e.TargetFileName = e.TargetFileName;
      };
}

LookupSourceFiles {
  t.Config e.Files
    = <Config-GetTargetMode t.Config> : s.TargetMode
    = <Config-GetSearchFolders t.Config> : e.SearchFolders
    = <Map
        {
          (s.Pos e.FileName)
            = <FindFiles s.TargetMode (e.SearchFolders) (e.FileName)>
            : {
                (s.ResultTag e.Info) = (s.Pos s.ResultTag e.Info);
              };
        }
        e.Files
      >;
}

RenameTargets {
  #EXE e.Files = <RenameTargets-WithCpp e.Files>;
  #LIB e.Files = <RenameTargets-WithCpp e.Files>;

  #R e.Files = <RenameTargets-Stub e.Files>;
  #CompileOnly e.Files = <RenameTargets-Stub e.Files>;
}

RenameTargets-Stub {
  e.Files
    = <Map
        {
          (s.Pos #Output e.FileName)
            = (s.Pos #Output e.FileName #NoNative);

          (s.Pos #OutputWithNative (e.FileName) e.NativeFileName)
            = (s.Pos #Output e.FileName (e.NativeFileName));

          (s.Pos #Source (s.Dialect e.Source) e.Output)
            = (s.Pos #Source (s.Dialect e.Source) e.Output);
        }
        e.Files
      >;
}

RenameTargets-WithCpp {
  e.Files = <ScanCollisions <Map GetFileName e.Files>>;
}

GetFileName {
  (s.Pos #Output e.FileName)
    = ((<GetBaseNameLowerCase e.FileName>)
      (s.Pos #Output e.FileName #NoNative));

  (s.Pos #OutputWithNative (e.FileName) e.NativeFileName)
    = (
        (<GetBaseNameLowerCase e.FileName>)
        (s.Pos #Output e.FileName (e.NativeFileName))
      );

  (s.Pos #Source (s.Dialect e.Source) e.Output)
    = (
        (<GetBaseNameLowerCase e.Output>)
        (s.Pos #Source (s.Dialect e.Source) e.Output)
      );
}

ScanCollisions {
  ((e.BaseName) e.Locations1)
  e.Files-B ((e.BaseName) e.Locations2) e.Files-E
    = <ScanCollisions
        e.Files-B ((e.BaseName) e.Locations1 e.Locations2) e.Files-E
      >;

  ((e.BaseName) e.Locations) e.Files
    = <RenameLocations e.Locations> <ScanCollisions e.Files>;

  /* пусто */ = /* всё */;
}

RenameLocations {
  e.Locations-B (s.Pos1 #Output e.FirstTarget t.FirstNative)
  e.Locations-M (s.Pos2 #Output e.SecondTarget t.SecondNative)
  e.Locations-E
    = (s.Pos2 #Collision (e.FirstTarget) e.SecondTarget);

  e.Locations-B (s.Pos #Output e.Target t.Native) e.Locations-E
    = <RenameLocations-Aux
        1 e.Locations-B (s.Pos #Output e.Target t.Native) e.Locations-E
      >;

  e.Locations = <RenameLocations-Aux 0 e.Locations>;
}

RenameLocations-Aux {
  s.InitNumber e.Locations
    = <MapReduce
        {
          0 (s.Pos #Source (s.Dialect e.Source) e.Output) =
            1 (s.Pos #Source (s.Dialect e.Source) e.Output);

          s.Num (s.Pos #Source (s.Dialect e.Source) e.Output '.rasl') =
            <Inc s.Num>
            (s.Pos #Source
              (s.Dialect e.Source) e.Output '@' <StrFromInt s.Num> '.rasl'
            );

          s.Num (s.Pos #Output e.Output t.Native) =
            s.Num (s.Pos #Output e.Output t.Native);
        }
        s.InitNumber e.Locations
      >
    : s.Num e.NewLocations
    = e.NewLocations;
}

CompileFiles {
  t.Config #NormalRun e.Files
    = <Map
        {
          (s.Pos #Output e.OutputName #NoNative)
            = <WriteLine '+Linking ' e.OutputName>
              (#RASL e.OutputName);

          (s.Pos #Output e.OutputName (e.NativeName))
            = <WriteLine '+Linking (+ natives) ' e.OutputName>
              (#RASL e.OutputName) (#Native e.NativeName);

          (s.Pos #Source (s.Dialect e.Source) e.OutputName)
            = <WriteLine '*Compiling ' e.Source ':'> : /* пусто */
            = <CompileFile t.Config (s.Dialect e.Source) e.OutputName>
            : {
                #Success e.OutputName^ #NoNative
                  = (#RASL e.OutputName);

                #Success e.OutputName^ (e.NativeOutputName)
                  = <WriteLine '   ... natives generated'>
                    (#RASL e.OutputName) (#Native e.NativeOutputName);

                #Fails = #Fails;
              };
        }
        e.Files
      >;

  t.Config #GrammarCheck e.Files
    = <Map
        {
          (s.Pos #Output e.OutputName)
            = <WriteLine '+Skipping native file ' e.OutputName> (e.OutputName);

          (s.Pos #Source (s.Dialect e.Source) e.OutputName)
            = <WriteLine '*Grammar checking ' e.Source ':'>
              <GrammarCheck t.Config s.Dialect e.Source>;
        }
        e.Files
      >;
}

Link {
  t.CommandLineSource t.Config e.Files
    = <Config-GetTargetMode t.Config>
    : {
        #EXE
          = <Link-Exe
              t.CommandLineSource t.Config
              (<Config-GetCppCompiler t.Config #EXE>)
              (<Config-GetPrefix t.Config>)
              e.Files
            >;

        #LIB
          = <Link-Lib
              t.CommandLineSource t.Config
              (<Config-GetCppCompiler t.Config #LIB>)
              (<Config-GetPrefix t.Config>)
              e.Files
            >;

        #R = <Link-R t.CommandLineSource t.Config e.Files>;

        #CompileOnly = /* ничего не делаем */;
      };
}

Link-Exe {
  t.CommandLineSource t.Config
  (#NoCppCompiler) (/* нет префикса */) e.Files
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'option -x (or --exe) require option '
          '--cpp-command-exe with nonempty value'
        )
      >;

  t.CommandLineSource t.Config
  ((e.CommandLine) e.Flags) (/* нет префикса */) e.Files
    = <Link-CppCompile t.Config ((e.CommandLine) e.Flags) e.Files>;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix)
  e.Files-B (#Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'unexpected native file ' e.FileName ' while compilation runs '
          'with prefix'
        )
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix) e.Files
    = <FindPrefix t.Config e.Prefix>
    : {
        #Success e.PrefixFileName
          = <Link-WithPrefix (e.PrefixFileName) t.Config e.Files>;

        #Fails e.ExpectedPrefixName
          = <ReportErrors
              t.CommandLineSource t.Config
              (1 'Can''t find prefix ' e.ExpectedPrefixName)
            >;
      };
}

Link-Lib {
  t.CommandLineSource t.Config
  (#NoCppCompiler) (/* нет префикса */)
  e.Files-B (#Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'option -l (or --lib) with native code require option '
          '--cpp-command-lib with nonempty value'
        )
      >;

  t.CommandLineSource t.Config
  (#NoCppCompiler) (/* нет префикса */) e.Files
    = <ReportWarnings
        t.CommandLineSource t.Config
        (
          1
          'prefix name or C++ command line is not found, '
          'create library without prefix'
        )
      >
      <Link-R t.CommandLineSource t.Config e.Files>;

  t.CommandLineSource t.Config
  ((e.CommandLine) e.Flags) (/* нет префикса */) e.Files
    = <Link-CppCompile t.Config ((e.CommandLine) e.Flags) e.Files>;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix)
  e.Files-B (#Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (
          1
          'unexpected native file ' e.FileName ' while compilation runs '
          'with prefix'
        )
      >;

  t.CommandLineSource t.Config
  (e.AnyCommandLine) (e.Prefix) e.Files
    = <FindPrefix t.Config e.Prefix>
    : {
        #Success e.PrefixFileName
          = <Link-WithPrefix (e.PrefixFileName) t.Config e.Files>;

        #Fails e.ExpectedPrefixName
          = <ReportWarnings
              t.CommandLineSource t.Config
              (
                1
                'Can''t find prefix ' e.ExpectedPrefixName ', create module '
                'without prefix (R module)'
              )
            >
            <Link-R t.CommandLineSource t.Config e.Files>;
      };
}

Link-R {
  t.CommandLineSource t.Config
  e.Files-B (#Native e.FileName) e.Files-E
    = <ReportErrors
        t.CommandLineSource t.Config
        (1 'unexpected native file ' e.FileName ' while creating R module')
      >;

  t.CommandLineSource t.Config e.Files
    = <Link-Aux
        #R
        {
          e.IntermediateName = /* ничего не делаем */;
        }
        t.Config e.Files
      >;
}

Link-WithPrefix {
  (e.PrefixFileName) t.Config e.Files
    = <Link-Aux
        <Config-GetTargetMode t.Config>
        {
          e.IntermediateName
            = <CopyPrefix (e.PrefixFileName) (e.IntermediateName)>
              <Chmod-X-Prefix t.Config e.IntermediateName>;
        }
        t.Config e.Files
      >;
}

Chmod-X-Prefix {
  t.Config e.IntermediateName
    = <Config-GetChmodXCommand t.Config>
    : {
        /* пусто */ = /* ничего не делаем */;

        e.ChmodXCommand
          = <System e.ChmodXCommand ' "' e.IntermediateName '"'>
          : s.RetCode
          = <CheckReturnCode t.Config s.RetCode 'chmod'>;
      };
}

CheckReturnCode {
  t.Config 0 e.Component = /* пусто */;

  t.Config s.RetCode e.Component
    = <LinkError
        t.Config
        e.Component ' finished with return code ' <StrFromInt s.RetCode>
      >;
}

Link-CppCompile {
  t.Config ((e.CommandLine) e.Flags) e.Files
    = <Link-Aux
        <Config-GetTargetMode t.Config>
        {
          e.IntermediateName
            = <System
                e.CommandLine
                e.IntermediateName
                e.Flags
                <Map
                  {
                    (#RASL e.FileName) = /* пусто */;
                    (#Native e.FileName) = ' "' e.FileName '"';
                  }
                  e.Files
                >
              >
            : s.RetCode
            = <CheckReturnCode t.Config s.RetCode 'C++ compiler'>
              <CheckCppCompilationSuccessed t.Config e.IntermediateName>
              <EnsureAligned4096 e.IntermediateName>;
        }
        t.Config e.Files
      >;
}

Link-Aux {
  s.TargetMode s.FnCreatePrefix t.Config e.Files
    = <CalcTargetFileName s.TargetMode t.Config e.Files> : e.TargetFileName
    = e.TargetFileName '.partial' : e.IntermediateName
    = <PreLinkCleanupTemporary t.Config e.IntermediateName>
      <s.FnCreatePrefix e.IntermediateName>
      <AppendRASLToBinary (e.IntermediateName) e.Files>
      <PostLinkRename
        t.Config (e.IntermediateName) (e.TargetFileName)
      >;
}

PreLinkCleanupTemporary {
  t.Config e.Temporary
    = <ExistFile e.Temporary>
    : {
        #False = /* ничего не делаем */;

        #True
          = <RemoveFile e.Temporary>
          : {
              #True ()
                = <WriteLine 'Lost temporary file ' e.Temporary ' is removed'>;

              #False (e.ErrorMessage)
                = <LinkError
                    t.Config
                    'Can''t remove file ' e.Temporary ': ' e.ErrorMessage
                  >;
            };
      };
}

CheckCppCompilationSuccessed {
  t.Config e.TemporaryName
    = <ExistFile e.TemporaryName>
    : {
        #False =
          <LinkError t.Config 'C++ compilation is failed'>;

        #True =
          /* ничего не делаем */;
      };
}

EnsureAligned4096 {
  e.BinaryName
    = <FOpen ('ab') e.BinaryName> : s.FileHandle
    = <AlignToPage s.FileHandle>
      <FClose s.FileHandle>;
}

AppendRASLToBinary {
  (e.BinaryName) e.Files
    = <FOpen ('ab') e.BinaryName> : s.FileHandle
    = <Map
        {
          (#RASL e.OutputName)
            = <FWriteBytes s.FileHandle <LoadBytes e.OutputName>>;

          (#Native e.NativeName) = /* ничего не делаем */;
        }
        e.Files
      >
      <FClose s.FileHandle>;
}

AlignToPage {
  s.FileHandle
    = <FSeek s.FileHandle #END '-' 0> : /* пусто */
    = <Mod <FTell s.FileHandle> 4096>
    : {
        0 = /* ничего не делаем */;

        s.Other =
          <FWriteBytes s.FileHandle '@'>
          <AlignToPage s.FileHandle>;
      };
}

PostLinkRename {
  t.Config (e.TemporaryName) (e.TargetFileName)
    = <ExistFile e.TargetFileName>
    : {
        #True
          = <RemoveFile e.TargetFileName>
          : {
              #True () = /* ничего не делаем */;

              #False (e.ErrorMessage)
                = <LinkError
                    t.Config
                    'Can''t remove file ' e.TargetFileName ', ' e.ErrorMessage
                  >;
             };

        #False = /* ничего не делаем */;
      }
    : /* пусто */
    = <RenameFile (e.TemporaryName) (e.TargetFileName)>
    : {
        #True = <WriteLine '** Compilation successed **'>;

        #False
          = <LinkError
              t.Config
              'Can''t rename from ' e.TemporaryName ' to ' e.TargetFileName
            >;
      };
}

FindPrefix {
  t.Config e.Prefix
    = <Config-GetTargetMode t.Config>
    : {
        #EXE = '.exe-prefix';
        #LIB = '.lib-prefix';
      }
    : e.PrefixExt
    = <DoFindPrefix
        (e.Prefix e.PrefixExt) (#Current) <Config-GetSearchFolders t.Config>
      >;
}

DoFindPrefix {
  (e.PrefixName) (e.NextFolder) e.Folders
    = <GlueNames (e.NextFolder) (e.PrefixName)> : e.PrefixFileName
    = <ExistFile e.PrefixFileName>
    : {
        #True = #Success e.PrefixFileName;
        #False = <DoFindPrefix (e.PrefixName) e.Folders>;
      };

  (e.PrefixName) /* кончились папки */
    = #Fails e.PrefixName;
}

GlueNames {
  (#Current) (e.FileName) = e.FileName;
  (e.Folder) (e.FileName) = e.Folder '/' e.FileName;
}

CopyPrefix {
  (e.OriginalPrefixName) (e.NewExeName)
    = <SaveBytes (e.NewExeName) <LoadBytes e.OriginalPrefixName>>;
}

LinkError {
  t.Config e.Message
    = <WriteLine 'LINK ERROR: ' e.Message>
      <CreateErrorFileMark t.Config>
      <Exit 1>;
}

GetBaseNameLowerCase {
  e.FileName '.rasl' = <Lower <GetLastPartName e.FileName>>;
}

GetLastPartName {
  e.FileName = <DoGetFileName e.FileName>;
}

DoGetFileName {
  e.FileName '/' = ;
  e.FileName '\\' = ;
  e.FileName s.Last = <DoGetFileName e.FileName> s.Last;
  = ;
}
