//FROM Library
$EXTERN Add;

//FROM LibraryEx
$EXTERN Inc, StrFromInt, Map, Fetch, MapReduce;

//FROM DisplayName
$EXTERN DisplayName;

//FROM Escape
$EXTERN EscapeChar;


$ENTRY Inc2 {
  s.Num = <Add 2 s.Num>;
}

$ENTRY IncVarOffset {
  s.ContextOffset 'e' = <Inc2 s.ContextOffset>;
  s.ContextOffset 't' = <Inc s.ContextOffset>;
  s.ContextOffset 's' = <Inc s.ContextOffset>;
}

$ENTRY PrintVar {
  s.Mode e.Index #NoDepth = s.Mode '.' e.Index;

  s.Mode e.Index s.Depth = s.Mode '.' e.Index '#' <StrFromInt s.Depth>;
}

$ENTRY FakeOffset {
  e.Expr =
    <Map
      {
        (s.Bracket) = (s.Bracket #NoOffset);

        (#TkVariable s.Mode e.Index s.Depth s.Offset) =
          // без изменений
          (#TkVariable s.Mode e.Index s.Depth s.Offset);

        (s.Token e.TokenInfo) = (s.Token e.TokenInfo #NoOffset);
      }
      e.Expr
    >;
}

$ENTRY TextFromExpr {
  e.Expr =
    <Map
      {
        (#TkOpenBracket s.ContextOffset) =
          ' (' <Offset s.ContextOffset>;
        (#TkCloseBracket s.ContextOffset) =
          ' )' <Offset s.ContextOffset>;

        (#TkOpenCall s.ContextOffset) =
          ' <' <Offset s.ContextOffset>;
        (#TkCloseCall s.ContextOffset) =
          ' >' <Offset s.ContextOffset>;

        (#TkOpenADT s.ContextOffset e.Name s.NameOffset) =
          ' [' <Offset s.ContextOffset>
          <DisplayName e.Name> <Offset s.NameOffset>;

        (#TkOpenADT s.ContextOffset) =
          ' [' <Offset s.ContextOffset>;
        (#TkCloseADT s.ContextOffset) =
          ' ]' <Offset s.ContextOffset>;

        (#TkClosureHead s.ContextOffset)
          = ' [*]' <Offset s.ContextOffset>;
        (#TkUnwrappedClosure s.ContextOffset)
          = ' {*}' <Offset s.ContextOffset>;

        (#TkChar s.Char s.Offset) =
          ' ''' <EscapeChar s.Char> '' <Offset s.Offset>;

        (#TkChars e.Chars) = ' ''' e.Chars '';

        (#TkNumber #Cookie1 s.Offset) = ' <Cookie1>' <Offset s.Offset>;
        (#TkNumber #Cookie2 s.Offset) = ' <Cookie2>' <Offset s.Offset>;

        (#TkNumber s.Number s.Offset) =
          ' ' <StrFromInt s.Number> <Offset s.Offset>;

        (#TkName e.Name s.Offset) =
          ' & ' <DisplayName e.Name> <Offset s.Offset>;

        (#TkString e.String s.Offset) =
          '"' <Map EscapeChar e.String> '"' <Offset s.Offset>;

        (#TkVariable s.Mode e.Index s.Depth s.Offset) =
          ' ' <PrintVar s.Mode e.Index s.Depth> <Offset s.Offset>;

        (#TkVariableCopy s.Mode e.Index s.Depth s.SampleOffset s.CopyOffset) =
          ' ' <PrintVar s.Mode e.Index s.Depth>
          <Offset s.SampleOffset> <Offset s.CopyOffset>;

        (#TkIdentifier e.Name s.Offset) =
          ' # ' <SafeDisplayName e.Name> <Offset s.Offset>;

        (#Tile e.SubRange) = ' Tile{' <TextFromExpr e.SubRange> ' }';
        (#AsIs e.SubRange) = ' AsIs:' <TextFromExpr e.SubRange>;
        (#Reuse e.SubRange) = ' Reuse:' <TextFromExpr e.SubRange>;
        (#HalfReuse e.SubRange) = ' HalfReuse:' <TextFromExpr e.SubRange>;

        (#LEFT-EDGE) = ' [[';
        (#RIGHT-EDGE) = ' ]]';
        #RemovedTile = ' {REMOVED TILE}';
      }
      <TextFromExpr-Prepare e.Expr>
    >;
}

SafeDisplayName {
  e.Name
    = <Map
        {
          '\n' = '$n';
          '\r' = '$r';
          ' ' = '$_';
          '\t' = '$t';
          '$' = '$$';
          s.Other = s.Other;
        }
        <DisplayName e.Name>
      >;
}

TextFromExpr-Prepare {
  (#TkChar s.Char #NoOffset) e.Tail =
    <TextFromExpr-Prepare-Chars () (#TkChar s.Char #NoOffset) e.Tail>;

  (#TkOpenADT s.BracketOffset) (#TkName e.Name s.NameOffset) e.Tail =
    (#TkOpenADT s.BracketOffset e.Name s.NameOffset)
    <TextFromExpr-Prepare e.Tail>;

  t.Other e.Tail = t.Other <TextFromExpr-Prepare e.Tail>;

  /* пусто */ = /* пусто */;
}

TextFromExpr-Prepare-Chars {
  (e.Chars) (#TkChar s.Char #NoOffset) e.Tail =
    <TextFromExpr-Prepare-Chars (e.Chars <EscapeChar s.Char>) e.Tail>;

  (e.Chars) e.Tail = (#TkChars e.Chars) <TextFromExpr-Prepare e.Tail>;
}

Offset {
  #NoOffset = ;
  s.Offset = '/' #Offset s.Offset;
}

/**
  <GenPattern s.FnGenInitSubst s.FnGenSubst (e.Name) e.Pattern>
    == s.ContextOffset (e.Vars) (e.MarkedPattern) e.PatternCommands
*/
$ENTRY GenPattern {
  s.FnGenInitSubst s.FnGenSubst (e.Name) e.Pattern
    = <s.FnGenInitSubst (e.Name) e.Pattern>
    : s.ContextTop e.Substitutes (e.Commands)
    = <s.FnGenSubst s.ContextTop e.Substitutes (e.Commands)>;
}

/**
  <GenResult
    s.FnGenResult (e.Result)
    s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands
  >
    == (#CmdIssueMemory s.ContextSize) e.SentenceCommands
*/
$ENTRY GenResult {
  s.FnGenResult (e.Result)
  s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands
    = <s.FnGenResult
        s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
      >
    : s.ContextCount e.ResultCommands
    = <FoldOpenELoops
        (#CmdIssueMemory s.ContextCount)
        e.PatternCommands
        <PutVariableDebugTable e.PatternVars>
        e.ResultCommands
      >;
}

$ENTRY FoldOpenELoops {
  e.Commands-B (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

$ENTRY PutVariableDebugTable {
  e.PatternVars =
    <Map
      {
        (s.Mode (e.Index) s.FirstOffset e.Offsets) =
          (#CmdVariableDebugTable s.Mode e.Index s.FirstOffset);
      }
      e.PatternVars
    >;
}

/**
  <CollectStrings e.ReducedExpression>
    == e.ReducedExpressionWithTkString
  e.ReducedExpression — см. interfaces.md
*/
$ENTRY CollectStrings {
  (#TkChar s.Value1) (#TkChar s.Value2) e.Tail =
    <Fetch
      <BuildString (s.Value1 s.Value2) e.Tail>
      {
        (e.Chars) e.Tail^ = (#TkString e.Chars) <CollectStrings e.Tail>;
      }
    >;

  (#Brackets e.InBrackets) e.Tail =
    (#Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#CallBrackets e.InBrackets) e.Tail =
    (#CallBrackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#ADT-Brackets e.InBrackets) e.Tail =
    (#ADT-Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  t.OtherTerm e.Tail = t.OtherTerm <CollectStrings e.Tail>;

  /* пусто */ = /* пусто */;
}

BuildString {
  (e.Chars) (#TkChar s.Value) e.Tail =
    <BuildString (e.Chars s.Value) e.Tail>;

  (e.Chars) e.Tail = (e.Chars) e.Tail;
}

/**
  <MakeSavers s.ContextOffset e.SubstitutesAnsJunks>
    == s.ContextOffset (e.CmdSaves) e.SubstitutesAnsJunks
*/
$ENTRY MakeSavers {
  s.OriginContextOffset e.SubstitutesAnsJunks
    = <MapReduce
        {
          (s.ContextOffset e.CmdSaves) (#Junk e.Junk)
            = (s.ContextOffset e.CmdSaves) (#Junk e.Junk);

          (s.ContextOffset e.CmdSaves) (#E s.Num e.Range)
            = (
                <Inc2 s.ContextOffset>
                e.CmdSaves (#CmdSave s.Num s.ContextOffset)
              )
              (#E s.ContextOffset e.Range);

          (s.ContextOffset e.CmdSaves) (s.S-or-T s.Num e.Range)
            = (s.ContextOffset e.CmdSaves) (s.S-or-T s.Num e.Range);
        }
        (s.OriginContextOffset /* CmdSave's */)
        e.SubstitutesAnsJunks
      >
    : (s.ContextOffset^ e.CmdSaves) e.SubstitutesAnsJunks^
    = s.ContextOffset (e.CmdSaves) e.SubstitutesAnsJunks;
}
