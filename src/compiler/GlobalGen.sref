//FROM FastGen
$EXTERN CreateFastGen, FastGen-Terms;

//FROM LibraryEx
$EXTERN Inc, TermCompare, Map, Min, Max, Dec, UnBracket;

//FROM Library
$EXTERN Add, Sub;

//FROM HighLevelRASL-Common
$EXTERN TextFromExpr;


$ENTRY CreateGlobalGen {
  e.HardSentences

    = <CreateFastGen e.HardSentences> : s.Num (e.FastGen)

    = <InspectFastGen e.FastGen> : e.Inspected

    = (e.FastGen) (<GlobalGen e.Inspected>);
}

InspectFastGen {
  (#E '$' e.EReplacements) e.Tail
    = <ReplacmentsCounter 0 () e.EReplacements>
    : {
        1 = 1;
        s.Num = 0;
      }
    : s.ReplacmentsCounter^
    = (#E s.ReplacmentsCounter '$' e.EReplacements)
      <InspectFastGen e.Tail>;

  (#Brackets s.Num e.inBrackets) e.Tail
    = (#Brackets s.Num <InspectFastGen e.inBrackets>)
      <InspectFastGen e.Tail>;

  (#ADT-Brackets (e.Name) s.Num e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) s.Num <InspectFastGen e.inBrackets>)
      <InspectFastGen e.Tail>;

  (e.Any) e.Tail = (e.Any) <InspectFastGen e.Tail>;

  /* empty */ = /* empty */;
}

ReplacmentsCounter {
  s.Counter (e.Scanned) ((e.Replacement)) e.Tail
    = <InList (<PrepRep e.Replacement>) (e.Scanned)>
    : {
        0 (e.PrepReplacement) =
          <ReplacmentsCounter <Inc s.Counter> (e.Scanned (e.PrepReplacement)) e.Tail>;

        1 (e.PrepReplacement) = <ReplacmentsCounter s.Counter (e.Scanned) e.Tail>;
      };

  s.Counter (e.Scanned) = s.Counter;
}

PrepRep {
  (#Atom e.Body) e.Tail = (#Atom e.Body) <PrepRep e.Tail>;

  (#Brackets s.Num e.inBrackets) e.Tail
    = (#Brackets s.Num <PrepRep e.inBrackets>)
      <PrepRep e.Tail>;

  (#ADT-Brackets (e.Name) s.Num e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) s.Num <PrepRep e.inBrackets>)
      <PrepRep e.Tail>;

  (s.Mode e.Body) e.Tail = (s.Mode) <PrepRep e.Tail>;

  (e.Else) e.Tail = (e.Else) <PrepRep e.Tail>;

  /* empty */ = /* empty */;
}

InList {
  (e.Elem) () = 0 (e.Elem);

  (e.Elem) (t.ListElem e.List)
    = <TermCompare (t.ListElem) (e.Elem)>
    : {
        '=' = 1 ();
        s.Else = <InList (e.Elem) (e.List)>;
      };
}


GlobalGen {
  /* empty */ = ();

  e.Inspected
    = <Map
        {
          (#E 0 '$' e.Body) = <GlobalGen-Aux e.Body>;

          (#E 1 '$' e.Body) = (#E '$' e.Body);

          (#Brackets s.Num e.inBrackets) =
            (#Brackets <GlobalGen e.inBrackets>);

          (#ADT-Brackets (e.Name) s.Num e.inBrackets) =
            (#ADT-Brackets (e.Name) <GlobalGen e.inBrackets>);

          (#S '$' e.Substitutions) = (#S '$' e.Substitutions);
          (#T '$' e.Substitutions) = (#T '$' e.Substitutions);

          (#Atom s.Type e.Value) = (#Atom s.Type e.Value);
        }
        e.Inspected
      >;
}

GlobalGen-Aux {
  e.Replacements
    = <Map
        {
          ((e.Replacement)) = (e.Replacement);
        }
        e.Replacements
      >
    : e.Replacements^
    = <GetComplex
        <Map
          {
            ((e.Class) e.Body) = <CalcComplexity <Generalization 1 e.Body>>;
          }
          <CreateSuperposition
            (e.Replacements)
            (<ComputePossibleClasses e.Replacements>)
          >
        >
      >;
}

ComputePossibleClasses {
  e.Patterns
    = <ComputeClasses e.Patterns> : e.Classes^
    = <GetMinKMN (100 100 100) e.Classes> : (s.K s.M s.N)
    = <ComputePossibleClasses-Aux (s.K s.M s.N)>;
}

ComputeClasses {
  e.Patterns
    = <Map
        {
          (e.Left (#E e.Body) e.Right) =
            (#MN <ComputeClassMN e.Left (#E e.Body) e.Right 0 0>);
          (e.Pattern) = (#K <ComputeClassK e.Pattern 0>);
        }
        e.Patterns
      >;
}

GetMinKMN {
  (s.K s.M s.N) (#K s.KNum) e.OtherClasses
    = <GetMinKMN (<Min s.K s.KNum> s.M s.N) e.OtherClasses>;

  (s.K s.M s.N) (#MN s.MNum s.NNum) e.OtherClasses
    = <GetMinKMN (s.K <Min s.M s.MNum> <Min s.N s.NNum>) e.OtherClasses>;

  (s.K s.M s.N) = (s.K s.M s.N);
}

ComputePossibleClasses-Aux {
  (s.K 100 100) = <GetClasses 0 s.K s.K>;

  (100 s.M s.N) = (s.M s.N);

  (s.K s.M s.N)
    = <TermCompare s.K <Add s.M s.N>>
      <TermCompare s.K s.M>
      <TermCompare s.K s.N>
    : {
        '>' e.Tail = (s.M s.N);
        '=' e.Tail = (s.M s.N);
        '<' '>' '>'
          = <GetClasses
              <Min <Sub s.K s.N> s.M>
              <Max <Sub s.K s.N> s.M>
              s.K
            >;
        '<' '>' '=' = <GetClasses 0 s.M s.K>;
        '<' '>' '<' = <GetClasses 0 s.M s.K>;

        '<' '<' '>' = <GetClasses <Sub s.K s.N> s.K s.K>;
        '<' '<' '=' = <GetClasses 0 s.K s.K>;
        '<' '<' '<' = <GetClasses 0 s.K s.K>;

        '<' '=' '>' = <GetClasses <Sub s.K s.N> s.K s.K>;
        '<' '=' '=' = <GetClasses 0 s.K s.K>;
        '<' '=' '<' = <GetClasses 0 s.K s.K>;
      };
}

/* (M, MplusN - M) till M <= MaxM */
GetClasses {
  s.M s.MaxM s.MplusN
    = <TermCompare s.M s.MaxM>
    : {
        '>' = ;
        s.Else = (s.M <Sub s.MplusN s.M>) <GetClasses <Inc s.M> s.MaxM s.MplusN>;
      };
}

ComputeClassK {
  s.K = s.K;
  t.Term e.Tail s.K = <ComputeClassK e.Tail <Inc s.K>>;
}

ComputeClassMN {
  (#E e.Body) s.M s.N = s.M s.N;

  (#E e.Body1) e.Any (#E e.Body2) s.M s.N = s.M s.N;

  (#E e.Body) e.Any t.Right s.M s.N
    = <ComputeClassMN (#E e.Body) e.Any s.M <Inc s.N>>;

  t.Left e.Any (#E e.Body) s.M s.N
    = <ComputeClassMN e.Any (#E e.Body) <Inc s.M> s.N>;

  t.Left e.Any t.Right s.M s.N
    = <ComputeClassMN e.Any <Inc s.M> <Inc s.N>>;
}

Superposition {
  () (s.Num1 s.Num2) = (#E '$' (()) );
  (e.Any) (0 0) = (#E '$' ((e.Any)));

  ((#Brackets e.inBrackets) e.Tail)(s.Num1 0)
    = (#Brackets e.inBrackets)
      <Superposition (e.Tail) (<Dec s.Num1> 0)>;

  ((#ADT-Brackets (e.Name) e.inBrackets) e.Tail) (s.Num1 0)
    = (#ADT-Brackets (e.Name) e.inBrackets)
      <Superposition (e.Tail) (<Dec s.Num1> 0)>;

  ((#Atom e.Body) e.Tail) (s.Num1 0)
    = (#Atom e.Body)
      <Superposition (e.Tail) (<Dec s.Num1> 0)>;

  ((#S e.Body) e.Tail) (s.Num1 0)
    = (#S e.Body)
      <Superposition (e.Tail) (<Dec s.Num1> 0)>;

  ((#T e.Body) e.Tail) (s.Num1 0)
    = (#T e.Body)
      <Superposition (e.Tail) (<Dec s.Num1> 0)>;


  (e.Head (#Brackets e.inBrackets)) (s.Num1 s.Num2)
    = <Superposition (e.Head) (s.Num1 <Dec s.Num2>)>
      (#Brackets e.inBrackets);

  (e.Head (#ADT-Brackets (e.Name) e.inBrackets)) (s.Num1 s.Num2)
    = <Superposition (e.Head) (s.Num1 <Dec s.Num2>)>
      (#ADT-Brackets (e.Name) e.inBrackets);

  (e.Head (#Atom e.Body)) (s.Num1 s.Num2)
    = <Superposition (e.Head) (s.Num1 <Dec s.Num2>)>
      (#Atom e.Body);

  (e.Head (#S e.Body)) (s.Num1 s.Num2)
    = <Superposition (e.Head) (s.Num1 <Dec s.Num2>)>
      (#S e.Body);

  (e.Head (#T e.Body)) (s.Num1 s.Num2)
    = <Superposition (e.Head) (s.Num1 <Dec s.Num2>)>
      (#T e.Body);
}

CreateSuperposition-Aux {
  ((e.Pattern) e.Tail) (e.Class)
    = (<Superposition (e.Pattern) (e.Class)>)
      <CreateSuperposition-Aux (e.Tail) (e.Class)>;

  () (e.Class) = ;
}

CreateSuperposition {
  (e.Patterns) ((e.Class) e.Tail)
    = ((e.Class) <CreateSuperposition-Aux (e.Patterns)(e.Class)>)
      <CreateSuperposition (e.Patterns) (e.Tail)>;

  (e.Patterns) () = ;
}

Generalization-Aux {
  s.Num (t.Term1 e.Tail1)(t.Term2 e.Tail2)
    = <FastGen-Terms s.Num (t.Term1)(t.Term2)>
      <Generalization-Aux s.Num (e.Tail1)(e.Tail2)>;

  s.Num ((#E e.Pattern ))() = (#E '$' (e.Pattern) ());

  s.Num ()((#E e.Pattern )) = (#E '$' () (e.Pattern));

  s.Num ()() = ;
}

Generalization {
  s.Num (e.Pattern1) (e.Pattern2) e.Tail
    = <Generalization
        <Inc s.Num>
        (<Generalization-Aux s.Num (e.Pattern1) (e.Pattern2)>)
        e.Tail
      >;

  s.Num (e.Pattern) = (e.Pattern);
}

CalcComplexity {
  (e.Body) e.Tail
    = (<CalcComplexity-aux 1 e.Body> e.Body)
      <CalcComplexity e.Tail>;

  = ;
}

CalcComplexity-aux {
  s.Comp (#S e.Body) e.Tail
    = <CalcComplexity-aux <Add s.Comp 2> e.Tail>;

  s.Comp (#E e.Body) e.Tail
    = <CalcComplexity-aux <Sub s.Comp 1> e.Tail>;

  s.Comp (#T e.Body) e.Tail
    = <CalcComplexity-aux <Add s.Comp 1> e.Tail>;

  s.Comp (#Atom e.Body) e.Tail
    = <CalcComplexity-aux <Add s.Comp 3> e.Tail>;

  s.Comp (#Brackets s.Num e.Body) e.Tail
    = <CalcComplexity-aux <Add s.Comp 3> e.Body e.Tail>;

  s.Comp (#ADT-Brackets (e.Name) s.Num e.Body) e.Tail
    = <CalcComplexity-aux <Add s.Comp 3> e.Body e.Tail>;

  s.Comp = s.Comp;
}

GetComplex {
  (s.CurComplexity e.CurBody)(s.Complexity e.Body) e.Tail
    = <TermCompare s.CurComplexity s.Complexity>
    : {
        '>' = <GetComplex (s.CurComplexity e.CurBody) e.Tail>;
        s.Any = <GetComplex (s.Complexity e.Body) e.Tail>;
      };

    (s.CurComplexity e.CurBody) = e.CurBody;
}


$ENTRY PatternComment {
  e.Pattern = <TextFromExpr <PatternCommentRec e.Pattern>>;
}

PatternCommentRec {
  () = ;

  e.Pattern
    = <Map
        {
          (#Atom #TkChar s.Char) = (#TkChar s.Char #NoOffset);
          (#Atom #TkNumber s.Value) = (#TkNumber s.Value #NoOffset);
          (#Atom #TkName e.Name) = (#TkName e.Name #NoOffset);
          (#Atom #TkIdentifier e.Ident) = (#TkIdentifier e.Ident #NoOffset);

          (#Brackets s.Num e.InBrackets)
            = // Для отладки можно заменить #NoOffset на s.Num
              (#TkOpenBracket #NoOffset)
              <PatternCommentRec e.InBrackets>
              (#TkCloseBracket #NoOffset);

          (#ADT-Brackets (e.Name) s.Num e.InBrackets)
            = // Для отладки можно заменить #NoOffset на s.Num
              (#TkOpenADT #NoOffset e.Name #NoOffset)
              <PatternCommentRec e.InBrackets>
              (#TkCloseADT #NoOffset);

          (#Brackets e.InBrackets)
            = (#TkOpenBracket #NoOffset)
              <PatternCommentRec e.InBrackets>
              (#TkCloseBracket #NoOffset);

          (#ADT-Brackets (e.Name) e.InBrackets)
            = (#TkOpenADT #NoOffset e.Name #NoOffset)
              <PatternCommentRec e.InBrackets>
              (#TkCloseADT #NoOffset);

          (s.Tag (e.Index) e.Any)
            = (#TkVariable <ModeFromTag s.Tag> e.Index #NoDepth #NoOffset);

          (s.Tag '$' e.Any)
            = (#TkVariable <ModeFromTag s.Tag> '$' #NoDepth #NoOffset);
        }
        e.Pattern
      >;
}

ModeFromTag {
  #E = 'e';
  #T = 't';
  #S = 's';
}

$ENTRY ReverseGen {
  (#Brackets e.inBrackets) e.Tail =
    (#Brackets <ReverseGen e.inBrackets>) <ReverseGen e.Tail>;

  (#ADT-Brackets (e.Name) e.inBrackets) e.Tail =
    (#ADT-Brackets (e.Name) <ReverseGen e.inBrackets>) <ReverseGen e.Tail>;

  (#Atom s.Type e.Value) e.Tail = (s.Type e.Value) <ReverseGen e.Tail>;

  (s.Tag (e.Name) e.Any) e.Tail =
    (#TkVariable <ModeFromTag s.Tag> e.Name)
    <ReverseGen e.Tail>;

  (e.Else) e.Tail = (e.Else) <ReverseGen e.Tail>;

  /* empty */ = /* empty */;
}

ReversePattern {
  (s.Mode (e.name) '$' e.Replacements) e.Tail
    = (s.Mode (e.name) '$' <ReversePattern-Aux e.Replacements>)
      <ReversePattern e.Tail>;

  /* empty */ = /* empty */;
}

ReversePattern-Aux {
  (#Atom s.Type e.Value) e.Tail = (s.Type e.Value) <ReversePattern-Aux e.Tail>;

  (#Brackets s.Num e.inBrackets) e.Tail
    = (#Brackets <ReversePattern-Aux e.inBrackets>)
      <ReversePattern-Aux e.Tail>;

  (#ADT-Brackets (e.Name) s.Num e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) <ReversePattern-Aux e.inBrackets>)
      <ReversePattern-Aux e.Tail>;

  (#Brackets e.inBrackets) e.Tail
    = (#Brackets <ReversePattern-Aux e.inBrackets>)
      <ReversePattern-Aux e.Tail>;

  (#ADT-Brackets (e.Name) e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) <ReversePattern-Aux e.inBrackets>)
      <ReversePattern-Aux e.Tail>;

  (s.Mode (e.Name) e.Any) e.Tail
    = (#TkVariable <ModeFromTag s.Mode> e.Name)
      <ReversePattern-Aux e.Tail>;

  (s.Mode '$' ((e.Rep)) e.Any) e.Tail
    = <ReversePattern-Aux e.Rep>
      <ReversePattern-Aux e.Tail>;

  (s.Mode '$') e.Tail = (s.Mode '$') <ReversePattern-Aux e.Tail>;

  (e.Else) e.Tail = (<ReversePattern-Aux e.Else>) <ReversePattern-Aux e.Tail>;

  = ;
}

$ENTRY SplitGen {
  (e.GlobalGen) e.SentenceTails
    = <CreateIndexes ('idx') e.GlobalGen> : e.GlobalGen^
    = <GetGeneralization () e.GlobalGen> : (e.CommonPattern)
    = <GetReplacement e.GlobalGen>
    : {
        () /* is no substitutions */ = <SplitGen-Empty e.SentenceTails>;

        e.Substitutions = e.Substitutions;
      }
    : e.Substitutions
    = (e.CommonPattern) e.Substitutions;
}


SplitGen-Empty {
  (e.Sentence) e.Tail = () <SplitGen-Empty e.Tail>;

  = ;
}

CreateIndexes {
  (e.Idx) (s.Mode '$' e.Replacements) e.Tail
    = (s.Mode (e.Idx 0) '$' e.Replacements)
      <CreateIndexes (e.Idx 'V') e.Tail>;

  (e.Idx) (#Brackets s.Num e.inBrackets) e.Tail
    = (#Brackets <CreateIndexes (e.Idx 'B') e.inBrackets>)
      <CreateIndexes (e.Idx 'T') e.Tail>;

  (e.Idx) (#ADT-Brackets (e.Name) s.Num e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) <CreateIndexes (e.Idx 'D') e.inBrackets>)
      <CreateIndexes (e.Idx 't') e.Tail>;

  (e.Idx) (#Brackets e.inBrackets) e.Tail
    = (#Brackets <CreateIndexes (e.Idx 'B') e.inBrackets>)
      <CreateIndexes (e.Idx 'T') e.Tail>;

  (e.Idx) (#ADT-Brackets (e.Name) e.inBrackets) e.Tail
    = (#ADT-Brackets (e.Name) <CreateIndexes (e.Idx 'D') e.inBrackets>)
      <CreateIndexes (e.Idx 't') e.Tail>;

  (e.Idx) (#Atom e.Body) e.Tail
    = (#Atom e.Body) <CreateIndexes (e.Idx 'A') e.Tail>;

  (e.Idx) () e.Tail = <CreateIndexes (e.Idx 'E') e.Tail>;

  (e.Idx) = ;
}

GetGeneralization {
  (e.Scanned) (s.gen (e.name)'$' ((e.rep)) e.reps) e.Tail
    = <GetGeneralization (e.Scanned (s.gen (e.name))) e.Tail>;

  (e.Scanned) (#Brackets e.inBrackets) e.Tail
    = <GetGeneralization
        (e.Scanned (#Brackets <UnBracket <GetGeneralization () e.inBrackets>>))
        e.Tail
      >;

  (e.Scanned) (#ADT-Brackets (e.Name) e.inBrackets) e.Tail
    = <GetGeneralization
        (
          e.Scanned
          (#ADT-Brackets
            (e.Name) <UnBracket <GetGeneralization () e.inBrackets>>
          )
        )
        e.Tail
      >;

  (e.Scanned) (e.gen) e.Tail = <GetGeneralization (e.Scanned (e.gen)) e.Tail>;

  (e.Scanned) = (e.Scanned);
}

GetReplacement {
  e.All = <GetReplacement-Aux e.All (/*Scanned*/) (/*Else*/)>;
}

GetReplacement-Aux {
  (s.Mode (e.Name) '$') e.Tail = ;

  (#Brackets e.Replacements) e.Tail (e.Scanned) (e.Else)
    = <GetReplacement-Aux e.Replacements e.Tail (e.Scanned) (e.Else)>;

  (#ADT-Brackets (e.Name) e.Replacements) e.Tail (e.Scanned) (e.Else)
    = <GetReplacement-Aux e.Replacements e.Tail (e.Scanned) (e.Else)>;

  (s.Mode (e.Name) '$' ((e.rep)) e.otherRep ) e.Tail (e.Scanned) (e.Else)
    = <GetReplacement-Aux
        e.Tail
        (e.Scanned (s.Mode (e.Name) '$' e.rep))
        (e.Else (s.Mode (e.Name) '$' e.otherRep))
      >;

  (s.Mode s.Type e.gen) e.Tail (e.Scanned) (e.Else)
    = <GetReplacement-Aux e.Tail (e.Scanned) (e.Else)>;

  (/*Scanned*/) (/*Else*/) = ();

  (e.Scanned) (e.Else) = (<ReversePattern e.Scanned>) <GetReplacement e.Else>;
}
