//FROM LibraryEx
$EXTERN MapReduce, Map, TermCompare, Inc;

//FROM Library
$EXTERN WriteLine, StrFromInt, Exit, Lenw, Add;


/**
  <LowLevelRASL-RASL s.DebugInfo s.Hash1 s.Hash2 e.Items>
    == t.RASLModule

  s.DebugInfo ::= #DebugInfo | #NoDebugInfo
  s.Hash1, s.Hash2 ::= s.NUMBER

  In e.Items is used (#Function-ToRASL …) and (#Function-ToNative …)
  instead (#Function …).
*/
$ENTRY LowLevelRASL-RASL {
  s.DebugInfo s.Hash1 s.Hash2 e.Items

    = <MapReduce
        ClassifyItems
        (/* Области видимости функций */)
        e.Items
      >
    : (e.FuncScopeClass) e.Definitions

    = <Map (PrepareFunctionsRASL s.DebugInfo) e.Definitions> : e.Definitions^

    = (
        (#ModuleID s.Hash1 s.Hash2)
        <PrepareCommonRASL (e.FuncScopeClass) e.Definitions>
      );
}

OverflowFailure {
  e.Function #CmdIssueMemory s.Memory
    = <WriteLine 'Compilation failure in function ' e.Function ':'>
      <WriteLine
        '  this function requests ' <StrFromInt s.Memory> ' local variables, '
        'but maximum size is 255.'
      >
      <WriteLine '  Compilation aborted.'>
      <Exit 1>;

  e.Function #CmdOnFailGoTo s.Memory
    = <WriteLine 'Compilation failure in function ' e.Function ':'>
      <WriteLine
        '  this function try jump over ' <StrFromInt s.Memory> ' commands, '
        'but maximum jump length is 255.'
      >
      <WriteLine '  Compilation aborted.'>
      <Exit 1>;
}

ClassifyItems {
  (e.FuncScopeClass) (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody);

  (e.FuncScopeClass) (#Function-ToNative s.ScopeClass (e.Name) e.Commands) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdEnum s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdEnumDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdSwap s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdSwapDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdDeclaration s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name)) /* skip */;

  (e.FuncScopeClass) (#CmdDefineIdent e.Name) =
    (e.FuncScopeClass) /* skip */;

  (e.FuncScopeClass) (#CmdEmitNativeCode t.SrcPos e.Code) =
    (e.FuncScopeClass) /* skip */;
}

PrepareFunctionsRASL {
  s.DebugInfo (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody)

    = <RemoveDebugInfo s.DebugInfo e.FunctionBody> : e.FunctionBody^

    = <ConvertInterpretCommands e.FunctionBody>
    : {
        e.Commands-B (#OVERFLOW s.Type s.Count) e.Commands-E
          = <OverflowFailure e.Name s.Type s.Count>;

        e.Commands = e.Commands;
      }
    : e.RASLCommands^

    = <AddBacktrackStackAllocationCommand e.RASLCommands> : e.RASLCommands^

    = (#CmdInterpretFuncDescr
        s.ScopeClass
        (e.Name)
        <Lenw
          (#CmdProfileFunction)
          (#CmdLoadConstants)
          e.RASLCommands
        >
      );

  s.DebugInfo t.OtherItem = t.OtherItem;
}

RemoveDebugInfo {
  #DebugInfo e.FunctionBody =
    // ничего не меняем, сохраняем отладочную информацию как есть
    e.FunctionBody;

  #NoDebugInfo e.FunctionBody =
    <RemoveDebugInfoRec e.FunctionBody>;
}

RemoveDebugInfoRec {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdSentence <RemoveDebugInfoRec e.SubCommands>) <RemoveDebugInfoRec e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <RemoveDebugInfoRec e.SubCommands>
    )
    <RemoveDebugInfoRec e.Tail>;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset) e.Tail =
    <RemoveDebugInfoRec e.Tail>;

  t.Command e.Tail = t.Command <RemoveDebugInfoRec e.Tail>;

  /* пусто */ = /* пусто */;
}

ConvertInterpretCommands {
  e.Commands = <Map ConvertOneInterpretCommand e.Commands>;
}

ConvertOneInterpretCommand {
  (#CmdComment e.Text) = /* skip comment command */;

  (#CmdIssueMemory s.Memory)
    = <TermCompare s.Memory 256>
    : {
        '<' = (#CmdIssueMemory s.Memory);

        s.Other = (#OVERFLOW #CmdIssueMemory s.Memory);
      };

  (#CmdNumber s.Direction s.BracketNumber s.Number)
    = <TermCompare s.Number 256>
    : {
        '<' = (#CmdNum s.Direction s.BracketNumber s.Number);

        s.Other = (#CmdHugeNum s.Direction s.BracketNumber s.Number);
      };

  (#CmdNumberSave s.Direction s.BracketNumber s.SaveOffset s.Number)
    = <TermCompare s.Number 256>
    : {
        '<' =
          (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);

        s.Other =
          (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);
      };

  (#CmdCreateElem s.CreateMode s.ElemNo #ElNumber s.Number)
    = <TermCompare s.Number 256>
    : {
        '<' = (#CmdCreateElem s.CreateMode s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number);
      };

  (#CmdUseRes) = /* пусто */;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset)
    = (#CmdVariableDebugTable
        s.Mode '.' e.Index '#' <StrFromInt s.Depth> s.Offset
      );

  (#CmdSentence e.SubCommands)
    = <Lenw <ConvertInterpretCommands e.SubCommands>>
    : s.Length e.SubCommands^
    = <TermCompare s.Length 256>
    : {
        '<'
           = (#CmdOnFailGoTo s.Length)
             e.SubCommands
             (#CmdProfilerStopSentence);

         s.Other = (#OVERFLOW #CmdOnFailGoTo s.Length);
      };

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) =
    (#CmdEPrepare s.BracketNum s.VarNumber)
    (#CmdEStart s.BracketNum s.VarNumber)
    <ConvertInterpretCommands e.SubCommands>;

  t.Command = t.Command;
}

PrepareCommonRASL {
  (e.FuncScopeClass) e.Definitions

    = <GlueFunctionRASLs e.Definitions>
    : (s.RASL-Length e.RASL-Commands) e.Items

    = <OutlineConstants
        (0 /* функции */)
        (0 /* идентификаторы */)
        (0 /* большие числа */)
        (0 /* строки */)
        e.RASL-Commands
      >
    : (#CmdFuncArray s.FunctionCount e.Functions)
      (#CmdLabelArray s.LabelCount e.Labels)
      (#CmdNumberArray s.NumberCount e.Numbers)
      (#CmdStringArray s.StringCount e.Strings)
      e.RASL-Commands^

    = (#CmdFuncArray
        s.FunctionCount
        <SetFunctionsScopeClass (e.FuncScopeClass) e.Functions>
      )
      (#CmdLabelArray s.LabelCount e.Labels)
      (#CmdNumberArray s.NumberCount e.Numbers)
      (#CmdStringArray s.StringCount e.Strings)
      (#RASL e.RASL-Commands)
      (#Items e.Items);
}

GlueFunctionRASLs {
  e.Definitions
    = <MapReduce
        {
          (s.CurrentOffset e.All-RASL-Commands)
          (#CmdInterpretFuncDescr
            s.ScopeClass (e.Name) s.RASL-Length e.RASL-Commands
          )
            = (
                <Add s.CurrentOffset s.RASL-Length>
                e.All-RASL-Commands e.RASL-Commands
              )
              (#CmdInterpretFuncDescr s.ScopeClass e.Name s.CurrentOffset);

          (s.CurrentOffset e.All-RASL-Commands) t.OtherItem
            = (s.CurrentOffset e.All-RASL-Commands) t.OtherItem;
        }
        (0 /* rasl */)
        e.Definitions
      >;
}

SetFunctionsScopeClass {
  (e.FuncScopeClass) e.Functions
    = <MapReduce
        {
          (e.Decls-B (s.ScopeClass e.FuncName) e.Decls-E)
          (e.FuncName)
            = (e.Decls-B e.Decls-E)
              (s.ScopeClass e.FuncName);
        }
        (e.FuncScopeClass)
        e.Functions
      >
    : (e.FuncScopeClass-NotCalledFromRASL) e.Functions^
    = e.Functions;
}

RemoveNumber { (s.Number e.Name) = (e.Name); }

OutlineConstants {
  (s.NextFunc e.Funcs)
  (s.NextLabel e.Labels)
  (s.NextNumber e.Numbers)
  (s.NextString e.Strings)
  /* пусто */ =
    (#CmdFuncArray s.NextFunc <Map RemoveNumber e.Funcs>)
    (#CmdLabelArray s.NextLabel <Map RemoveNumber e.Labels>)
    (#CmdNumberArray s.NextNumber <Map { (s.Id s.Value) = s.Value; } e.Numbers>)
    (#CmdStringArray s.NextString <Map RemoveNumber e.Strings>);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.NextLabel);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNum s.Direction s.BracketNum s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNum s.Direction s.BracketNum s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.NextNumId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.Id);

  (e.Funcs) (e.Labels) (e.Numbers) (s.NextStringId e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.String))
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.NextStringId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
      e.Commands
    >
    (#CmdVariableDebugTable s.Id s.Offset);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.VarName))
      e.Commands
    >
    (#CmdVariableDebugTable s.NextStringId s.Offset);

  (e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  t.OtherCommand =
    <OutlineConstants (e.Funcs) (e.Labels) (e.Numbers) (e.Strings) e.Commands>
    t.OtherCommand;
}

AddBacktrackStackAllocationCommand {
  e.Commands
    = <MapReduce
        {
          s.Depth (#CmdEStart e.VarInfo) =
            <Inc s.Depth> (#CmdEStart e.VarInfo);

          s.Depth (#CmdOnFailGoTo s.Offset) =
            <Inc s.Depth> (#CmdOnFailGoTo s.Offset);

          s.Depth t.OtherCommand = s.Depth t.OtherCommand;
        }
        0 e.Commands
      >
    : {
        0 e.Commands^ = e.Commands;

        s.Depth e.Commands^ =
          (#CmdReserveBacktrackStack s.Depth) e.Commands;
      };
}
