//FROM LibraryEx
$EXTERN MapReduce, Inc, TermCompare, Map;

//FROM Library
$EXTERN StrFromInt;


/**
  <LowLevelRASL-RASL s.DebugInfo s.Hash1 s.Hash2 e.Items>
    == t.RASLModule

  s.DebugInfo ::= #DebugInfo | #NoDebugInfo
  s.Hash1, s.Hash2 ::= s.NUMBER

  In e.Items is used (#Function-ToRASL …) and (#Function-ToNative …)
  instead (#Function …).
*/
$ENTRY LowLevelRASL-RASL {
  s.DebugInfo s.Hash1 s.Hash2 e.Items

    = <MapReduce
        ClassifyItems
        (/* Области видимости функций */)
        e.Items
      >
    : (e.FuncScopeClass) e.Definitions

    = <MapReduce (PrepareFunctionsRASL s.DebugInfo) 0 e.Definitions>
    : s.MaxLabel e.Definitions^

    = (
        (#ModuleID s.Hash1 s.Hash2)
        <PrepareCommonRASL (e.FuncScopeClass) e.Definitions>
      );
}

ClassifyItems {
  (e.FuncScopeClass) (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody);

  (e.FuncScopeClass) (#Function-ToNative s.ScopeClass (e.Name) e.Commands) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdEnum s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdEnumDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdSwap s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdSwapDescr s.ScopeClass e.Name);

  (e.FuncScopeClass) (#CmdDeclaration s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name)) /* skip */;

  (e.FuncScopeClass) (#CmdDefineIdent e.Name) =
    (e.FuncScopeClass) /* skip */;

  (e.FuncScopeClass) (#CmdEmitNativeCode t.SrcPos e.Code) =
    (e.FuncScopeClass) /* skip */;
}

PrepareFunctionsRASL {
  s.DebugInfo s.NextLabel
  (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody)

    = <RemoveDebugInfo s.DebugInfo e.FunctionBody> : e.FunctionBody^

    = <ConvertInterpretCommands <Inc s.NextLabel> e.FunctionBody>
    : s.NextLabel^ e.RASLCommands^

    = <AddBacktrackStackAllocationCommand e.RASLCommands> : e.RASLCommands^

    = <AddFunctionNameComment (e.Name) e.RASLCommands> : e.RASLCommands^

    = s.NextLabel
      (#CmdInterpretFuncDescr
        s.ScopeClass
        (e.Name)
        (#LABEL s.NextLabel)
        (#CmdProfileFunction)
        (#CmdLoadConstants)
        e.RASLCommands
      );

  s.DebugInfo s.NextLabel t.OtherItem = s.NextLabel t.OtherItem;
}

RemoveDebugInfo {
  #DebugInfo e.FunctionBody =
    // ничего не меняем, сохраняем отладочную информацию как есть
    e.FunctionBody;

  #NoDebugInfo e.FunctionBody =
    <RemoveDebugInfoRec e.FunctionBody>;
}

RemoveDebugInfoRec {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdSentence <RemoveDebugInfoRec e.SubCommands>) <RemoveDebugInfoRec e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <RemoveDebugInfoRec e.SubCommands>
    )
    <RemoveDebugInfoRec e.Tail>;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset) e.Tail =
    <RemoveDebugInfoRec e.Tail>;

  t.Command e.Tail = t.Command <RemoveDebugInfoRec e.Tail>;

  /* пусто */ = /* пусто */;
}

ConvertInterpretCommands {
  s.NextLabel e.Commands
    = <MapReduce ConvertOneInterpretCommand s.NextLabel e.Commands>;
}

ConvertOneInterpretCommand-Simple {
  (#CmdComment e.Text) = /* skip comment command */;

  (#CmdUseRes) = /* пусто */;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset)
    = (#CmdVariableDebugTable
        s.Mode '.' e.Index '#' <StrFromInt s.Depth> s.Offset
      );

  t.Command = t.Command;
}

ConvertOneInterpretCommand {
  s.NextLabel (#CmdSentence e.SubCommands)

    = <ConvertInterpretCommands s.NextLabel e.SubCommands>
    : s.NextLabel^ e.SubCommands^

    = <Inc s.NextLabel>
      (#CmdOnFailGoTo s.NextLabel)
      e.SubCommands
      (#LABEL s.NextLabel)
      (#CmdProfilerStopSentence);


  s.NextLabel (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands)

    = <ConvertInterpretCommands s.NextLabel e.SubCommands>
    : s.NextLabel^ e.SubCommands^

    = s.NextLabel
      (#CmdEPrepare s.BracketNum s.VarNumber)
      (#CmdEStart s.BracketNum s.VarNumber)
      e.SubCommands;

  s.NextLabel t.Command
    = s.NextLabel <ConvertOneInterpretCommand-Simple t.Command>;
}

AddBacktrackStackAllocationCommand {
  e.Commands
    = <MapReduce
        {
          s.Depth (#CmdEStart e.VarInfo) =
            <Inc s.Depth> (#CmdEStart e.VarInfo);

          s.Depth (#CmdOnFailGoTo s.Offset) =
            <Inc s.Depth> (#CmdOnFailGoTo s.Offset);

          s.Depth t.OtherCommand = s.Depth t.OtherCommand;
        }
        0 e.Commands
      >
    : {
        0 e.Commands^ = e.Commands;

        s.Depth e.Commands^ =
          (#CmdReserveBacktrackStack s.Depth) e.Commands;
      };
}

AddFunctionNameComment {
  (e.Name) e.RASLCommands
    = <Map
        {
          (#CmdOnFailGoTo s.NextLabel)
            = (#CmdOnFailGoTo s.NextLabel "Func name:" e.Name);

          t.OtherCommand = t.OtherCommand;
        }
        e.RASLCommands
      >;
}

PrepareCommonRASL {
  (e.FuncScopeClass) e.Definitions

    = <GlueFunctionRASLs e.Definitions> : (e.RASL-Commands) e.Items

    = <OutlineConstants
        (0 /* функции */)
        (0 /* идентификаторы */)
        (0 /* строки */)
        e.RASL-Commands
      >
    : (#CmdFuncArray s.FunctionCount e.Functions)
      (#CmdIdentArray s.IdentCount e.Idents)
      (#CmdStringArray s.StringCount e.Strings)
      e.RASL-Commands^

    = (#CmdFuncArray
        s.FunctionCount
        <SetFunctionsScopeClass (e.FuncScopeClass) e.Functions>
      )
      (#CmdIdentArray s.IdentCount e.Idents)
      (#CmdNumberArray 0 /* empty */)
      (#CmdStringArray s.StringCount e.Strings)
      (#RASL e.RASL-Commands)
      (#Items e.Items);
}

GlueFunctionRASLs {
  e.Definitions
    = <MapReduce
        {
          (e.All-RASL-Commands)
          (#CmdInterpretFuncDescr
            s.ScopeClass (e.Name) (#LABEL s.Label) e.RASL-Commands
          )
            = (e.All-RASL-Commands (#LABEL s.Label) e.RASL-Commands)
              (#CmdInterpretFuncDescr s.ScopeClass e.Name s.Label);

          (e.All-RASL-Commands) t.OtherItem
            = (e.All-RASL-Commands) t.OtherItem;
        }
        (/* rasl */)
        e.Definitions
      >;
}

SetFunctionsScopeClass {
  (e.FuncScopeClass) e.Functions
    = <MapReduce
        {
          (e.Decls-B (s.ScopeClass e.FuncName) e.Decls-E)
          (e.FuncName)
            = (e.Decls-B e.Decls-E) (s.ScopeClass e.FuncName);

          // not defined — it is extern
          (e.Decls)
          (e.FuncName)
            = (e.Decls) (#GN-Entry e.FuncName);
        }
        (e.FuncScopeClass)
        e.Functions
      >
    : (e.FuncScopeClass-NotCalledFromRASL) e.Functions^
    = e.Functions;
}

RemoveNumber { (s.Number e.Name) = (e.Name); }

OutlineConstants {
  (s.NextFunc e.Funcs)
  (s.NextIdent e.Idents)
  (s.NextString e.Strings)
  /* пусто */ =
    (#CmdFuncArray s.NextFunc <Map RemoveNumber e.Funcs>)
    (#CmdIdentArray s.NextIdent <Map RemoveNumber e.Idents>)
    (#CmdStringArray s.NextString <Map RemoveNumber e.Strings>);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
  (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.Num);

  (s.NextFunc e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
  (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (s.NextFunc e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.Num);

  (s.NextFunc e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
  (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
  (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Idents)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
  (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Ident) =
    <OutlineConstants
      (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.Num);

  (e.Funcs) (s.NextIdent e.Idents) (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Ident) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextIdent> e.Idents (s.NextIdent e.Ident))
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.NextIdent);

  (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
  (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Ident) =
    <OutlineConstants
      (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (e.Funcs) (s.NextIdent e.Idents) (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Ident) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextIdent> e.Idents (s.NextIdent e.Ident))
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.NextIdent);

  (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Ident) =
    <OutlineConstants
      (e.Funcs) (s.NextIdent e.Idents-B (s.Num e.Ident) e.Idents-E)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.Num);

  (e.Funcs) (s.NextIdent e.Idents) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Ident) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextIdent> e.Idents (s.NextIdent e.Ident))
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.NextIdent);

  (e.Funcs) (e.Idents)
  (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Idents)
      (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.Id);

  (e.Funcs) (e.Idents) (s.NextStringId e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Idents)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.String))
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.NextStringId);

  (e.Funcs) (e.Idents)
  (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Idents)
      (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
      e.Commands
    >
    (#CmdVariableDebugTable s.Id s.Offset);

  (e.Funcs) (e.Idents)
  (s.NextStringId e.Strings)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Idents)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.VarName))
      e.Commands
    >
    (#CmdVariableDebugTable s.NextStringId s.Offset);

  (e.Funcs) (e.Idents) (e.Strings)
  e.Commands
  t.OtherCommand =
    <OutlineConstants (e.Funcs) (e.Idents) (e.Strings) e.Commands>
    t.OtherCommand;
}
