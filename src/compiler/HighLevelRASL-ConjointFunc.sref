//FROM LibraryEx
$EXTERN Fetch, MapReduce, Max;

//FROM HardSent
$EXTERN CreateHardPattern;

//FROM GlobalGen
$EXTERN CreateGlobalGen, SplitGen, PatternComment, ReverseGen;

//FROM HighLevelRASL-Common
$EXTERN GenPattern, MakeSavers, GenResult;

$ENTRY HighLevelRASL-Function-Conjoint {
  s.FnGenInitSubst s.FnGenSubst s.FnGenResult
  s.ScopeClass (e.Name) e.Sentences

    = <MapReduce
        {
          (e.HardPatterns) ((e.Pattern) (e.Result))
            = <CreateHardPattern e.Pattern> : e.HardPattern
            = (e.HardPatterns (e.HardPattern))
              ((<PatternComment e.HardPattern>) (e.Result));
        }
        (/* hard patterns */)
        e.Sentences
      >
    : (e.HardPatterns) e.SentenceTails

    = <CreateGlobalGen e.HardPatterns> : (e.FastGen) (e.GlobalGen)

    = <SplitGen (e.GlobalGen) e.SentenceTails> : (e.CommonPattern) e.SentSubsts

    = <ReverseGen e.CommonPattern> : e.CommonPattern^

    = <GenPattern s.FnGenInitSubst s.FnGenSubst (e.Name) e.CommonPattern>
    : s.ContextSize (e.Vars) (e.MarkedPattern) e.CommonMatchCommands

    = <MapReduce
        {
          ((e.Substitute) e.Substs) ((e.HardGenComment) (e.Result)) =
            (e.Substs) ((e.Substitute) (e.HardGenComment) (e.Result));
        }
        (e.SentSubsts) e.SentenceTails
      >
    : () e.SentencesWithSubst

    = <MapReduce
        {
          s.MaxMemory ((e.Substitute) (e.HardGenComment) (e.Result))
            = <ComposeVars (e.MarkedPattern) (e.Substitute) (e.Vars)>
            : e.SubstitutesAnsJunks
            = <MakeSavers s.ContextSize e.SubstitutesAnsJunks>
            : s.ContextSize^ (e.CmdSaves) e.SubstitutesAnsJunks^
            = <GenResult
                s.FnGenResult (e.Result)
                <s.FnGenSubst
                  s.ContextSize
                  e.SubstitutesAnsJunks
                  (e.CmdSaves)
                >
              >
            : (#CmdIssueMemory s.Memory) e.Commands
            = <Max s.MaxMemory s.Memory>
              (#CmdSentence
                (#CmdComment e.HardGenComment)
                e.Commands
              );
        }
        s.ContextSize e.SentencesWithSubst
      >
    : s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence)

    = (#Function
        s.ScopeClass (e.Name)
        (#CmdIssueMemory s.MaxMemory)
        (#CmdComment 'FAST GEN:' <PatternComment e.FastGen>)
        (#CmdComment 'GLOBAL GEN:' <PatternComment e.GlobalGen>)
        e.CommonMatchCommands
        e.Sentences
        <Fetch
          e.LastSentence
          {
            e.Commands (#CmdOpenELoop e.OpenELoop) =
              e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);
            e.LastSentence^ = e.LastSentence;
          }
        >
      );
}

ComposeVars {
  (e.MarkedPattern-B (#TkVariable s.Mode e.Name s.Offset) e.MarkedPattern-E)
  (e.Substitute-B (s.Tag (e.Name) '$' e.Subst) e.Substitute-E)
  (e.Vars-B (s.Mode (e.Name) s.Offset) e.Vars-E) =
    (#Junk e.MarkedPattern-B) (s.Tag s.Offset e.Subst)
    <ComposeVars
      (e.MarkedPattern-E)
      (e.Substitute-B e.Substitute-E) (e.Vars-B e.Vars-E)
    >;

  (e.MarkedPattern) () () = (#Junk e.MarkedPattern);
}
