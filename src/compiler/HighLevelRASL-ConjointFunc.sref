//FROM LibraryEx
$EXTERN Fetch, MapReduce, Max;

//FROM HardSent
$EXTERN CreateHardPattern;

//FROM GlobalGen
$EXTERN CreateGlobalGen, SplitGen, PatternComment;

//FROM HighLevelRASL-Common
$EXTERN GenPattern, MakeSavers, GenResult, FoldOpenELoops, PutVariableDebugTable;

//FROM HighLevelRASL-Condition
$EXTERN SentenceTail;

$ENTRY HighLevelRASL-Function-Conjoint {
  s.FnGenInitSubst s.FnGenSubst s.FnGenResult
  s.ScopeClass (e.Name) e.Sentences

    = <MapReduce
        {
          (e.HardPatterns) ((e.Pattern) e.Conditions (e.Result))
            = <CreateHardPattern e.Pattern> : e.HardPattern
            = (e.HardPatterns (e.HardPattern))
              ((<PatternComment e.HardPattern>) e.Conditions (e.Result));
        }
        (/* hard patterns */)
        e.Sentences
      >
    : (e.HardPatterns) e.SentenceTails

    = <CreateGlobalGen e.HardPatterns> : (e.FastGen) (e.GlobalGen)

    = <SplitGen (e.GlobalGen) e.SentenceTails> : (e.CommonPattern) e.SentSubsts

    = <GenPattern s.FnGenInitSubst s.FnGenSubst (e.Name) e.CommonPattern>
    : s.ContextSize (e.Vars) (e.MarkedPattern) e.CommonMatchCommands

    = <MapReduce
        {
          (
           (e.Substitute) e.Substs)
           ((e.HardGenComment) e.Conditions (e.Result)
          )
          =
            (e.Substs)
            ((e.Substitute) (e.HardGenComment) e.Conditions (e.Result));
        }
        (e.SentSubsts) e.SentenceTails
      >
    : () e.SentencesWithSubst

    = <MapReduce
        {
          s.MaxMemory ((e.Substitute) (e.HardGenComment) e.Conditions (e.Result))

            = <ComposeVars (e.MarkedPattern) (e.Substitute) (e.Vars)>
            : e.SubstitutesAnsJunks

            = <MakeSavers s.ContextSize e.SubstitutesAnsJunks>
            : s.ContextSize^ (e.CmdSaves) e.SubstitutesAnsJunks^

            = <s.FnGenSubst
                s.ContextSize
                e.SubstitutesAnsJunks
                (e.CmdSaves)
              >
            : s.StartOffsetCond
              (e.PatternVars) (e.MarkedPattern^)
              e.PatternCommands

            = <SentenceTail
                (s.StartOffsetCond)
                (s.FnGenResult e.Result)
                (e.PatternVars) ((e.MarkedPattern))
                e.Conditions
              >
            : s.MaxOffset e.SentenceTailCommands

            = <FoldOpenELoops
                e.PatternCommands
                <PutVariableDebugTable e.PatternVars>
                e.SentenceTailCommands
              >
              : e.Commands

            = <Max s.MaxMemory s.MaxOffset>
              (#CmdSentence
                (#CmdComment e.HardGenComment)
                e.Commands
              );
        }
        s.ContextSize e.SentencesWithSubst
      >
    : s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence)

    = (#Function
        s.ScopeClass (e.Name)
        (#CmdIssueMemory s.MaxMemory)
        (#CmdComment 'FAST GEN:' <PatternComment e.FastGen>)
        (#CmdComment 'GLOBAL GEN:' <PatternComment e.GlobalGen>)
        e.CommonMatchCommands
        e.Sentences
        <Fetch
          e.LastSentence
          {
            e.Commands (#CmdOpenELoop e.OpenELoop) =
              e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);
            e.LastSentence^ = e.LastSentence;
          }
        >
      );
}

ComposeVars {
  (e.MarkedPattern-B (#TkVariable s.Mode e.Name s.Offset) e.MarkedPattern-E)
  (e.Substitute-B (s.Tag (e.Name) '$' e.Subst) e.Substitute-E)
  (e.Vars-B (s.Mode (e.Name) s.Offset) e.Vars-E) =
    (#Junk e.MarkedPattern-B) (s.Tag s.Offset e.Subst)
    <ComposeVars
      (e.MarkedPattern-E)
      (e.Substitute-B e.Substitute-E) (e.Vars-B e.Vars-E)
    >;

  (e.MarkedPattern) () () = (#Junk e.MarkedPattern);
}
