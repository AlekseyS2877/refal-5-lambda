//FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Condition;

//FROM HighLevelRASL-Common
$EXTERN Inc2, FoldOpenELoops, PutVariableDebugTable;

//FROM LibraryEx
$EXTERN Inc, Max, Map;

//FROM HighLevelRASL-GenSubst-Save
$EXTERN GenSubst-Save-Cond;

//FROM Library
$EXTERN Add;


$ENTRY SentenceTail {
  s.StartOffsetCond
  (e.PatternVars) (e.MarkedPattern)
  (#Condition (e.CondName) (e.CondResult) (e.CondPattern)) e.ConditionsTail
  (e.ResultSentence)

    = <GenResult-Condition
        <Inc2 s.StartOffsetCond> (e.PatternVars)
	(#TkOpenCallCond s.StartOffsetCond)
        (#TkName e.CondName) e.CondResult
        (#TkCloseCallCond <Inc s.StartOffsetCond>)
      >
    : s.EndOffsetCond-Res e.CondResultCommands

    = <GenInitSubst-Cond s.StartOffsetCond (e.CondName) e.CondPattern>
    : s.OffsetCond
      e.CondSubstitutes (e.FirstCondPatternCommands)

    = <GenSubst-Save-Cond
        s.OffsetCond e.CondSubstitutes (e.PatternVars)
        (e.FirstCondPatternCommands)
      >
    : s.StartOffsetCondNext
      (e.PatternVars^) (e.MarkedPatternCond)
      e.CondPatternCommands

    = e.MarkedPattern : e.MarkedPatternPrefix t.CloseCall
    = e.MarkedPatternPrefix e.MarkedPatternCond t.CloseCall : e.MarkedPattern^

    = <SentenceTail
       s.StartOffsetCondNext
       (e.PatternVars) (e.MarkedPattern)
       e.ConditionsTail (e.ResultSentence)
      >
    : s.NestedStackTop e.NestedSentence

    = <Max s.EndOffsetCond-Res s.NestedStackTop> : s.StackTop

    = (#CmdSentence
        <FoldOpenELoops
          e.CondPatternCommands
          <PutVariableDebugTable e.PatternVars>
          e.NestedSentence
        >
      )
      (#CmdSpliceToFreeList-Range s.StartOffsetCond <Inc s.StartOffsetCond>)
    : e.CmdSentenceCommands

    = s.StackTop
      e.CondResultCommands
      (#CmdCallCondition)
      (#CmdProfileFunction)
      e.CmdSentenceCommands
      (#CmdFail);

  s.ContextOffset
  (e.PatternVars) (e.MarkedPattern)
  /*пусто*/ (s.FnGenResult e.Result)
    = <s.FnGenResult
        s.ContextOffset (e.PatternVars)
        (e.MarkedPattern)
        e.Result
      >;
}

GenInitSubst-Cond {
  s.ContextTop (e.FuncName) e.Pattern
    = s.ContextTop : s.0
    = <Add s.ContextTop 1> : s.1
    = <Add s.ContextTop 2> : s.2
    = <Add s.ContextTop 4> : s.4
    = <Add s.ContextTop 5> : s.5
    = s.5
      (#Junk (#TkOpenCall s.0) (#TkName e.FuncName s.4))
      (#E s.2 e.Pattern)
      (#Junk (#TkCloseCall s.1))
      (
        (#CmdCallSave #AlgLeft s.0 s.2)
      );
}
