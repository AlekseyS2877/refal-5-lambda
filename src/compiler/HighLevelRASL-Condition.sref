//FROM LibraryEx
$EXTERN Fetch, Map, Inc, Sort, Pipe, Max, Dec;

//FROM Library
$EXTERN Add;

//FROM HighLevelRASL-GenSubst-Save 
$EXTERN GenSubst-Save-Cond;

//FROM HighLevelRASL-Common
$EXTERN Inc2,FoldOpenELoops, PutVariableDebugTable, CollectStrings, 
IncVarOffset, PrintVar;

//FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Condition, MakeVariableCommentTable;

$ENTRY SentenceTail{

  (s.StartOffsetCond)
  (e.ResultSentence)
  (e.PatternVars)(e.MarkedPatternCur)
  (#Condition (e.CondName) (e.CondResult) (e.CondPattern)) e.ConditionsTail
    
    = <GenResult-Condition
        <Inc2 s.StartOffsetCond> (e.PatternVars) 
	(#TkOpenCallCond s.StartOffsetCond)
        (#TkName e.CondName) e.CondResult
        (#TkCloseCallCond <Inc s.StartOffsetCond>)
      >
      : s.EndOffsetCond-Res e.CondResultCommands        

    = <GenInitSubst-Cond s.StartOffsetCond (e.CondName) e.CondPattern>
      : s.OffsetCond 
        e.CondSubstitutes (e.FirstCondPatternCommands)

    = <GenSubst-Save-Cond
        s.OffsetCond e.CondSubstitutes (e.PatternVars)
        (e.FirstCondPatternCommands)
      >
      : s.StartOffsetCondNext 
        (e.PatternVarsAfterCond) (e.MarkedPatternCond)
        e.CondPatternCommands
    
    = e.MarkedPatternCur (e.MarkedPatternCond) : e.MarkedPatternCur^ 
                 
    = <SentenceTail
       (s.StartOffsetCondNext)
       (e.ResultSentence)
       (e.PatternVarsAfterCond) (e.MarkedPatternCur)
       e.ConditionsTail
      > 
      : s.NestedStackTop e.NestedSentence
       
     = <Max s.EndOffsetCond-Res s.NestedStackTop> : s.StackTop
     
     = (#CmdSentence <FoldOpenELoops
                        e.CondPatternCommands
                        <PutVariableDebugTable e.PatternVars>
                        e.NestedSentence
                     >
        )
        (#CmdSpliceToFreeList-Range
          s.StartOffsetCond
          <Inc s.StartOffsetCond>
        )
      : e.CmdSentenceCommands
      
    = e.CondResultCommands
      (#CmdCallCondition)
      (#CmdProfileFunction)
      e.CmdSentenceCommands
      (#CmdFail)
      : e.SentenceCommands
      
    = s.StackTop e.SentenceCommands;
           
  (s.ContextOffset)
  (s.FnGenResult e.Result)
  (e.PatternVars)  
  (e.MarkedPatternCur)
  /*пусто*/
  
    = e.MarkedPatternCur : (e.MarkedPattern t.CloseCall)  e.MarkedPatternCur^ 

    = <Map
        {
          (e.MarkedPattern^) = e.MarkedPattern;
        }
        e.MarkedPatternCur
      >
      : e.MarkedPatternCur^
    
    = <s.FnGenResult
        s.ContextOffset (e.PatternVars) 
        (e.MarkedPattern e.MarkedPatternCur t.CloseCall) 
        e.Result
      >
      : s.ContextCount e.ResultCommands

    = s.ContextCount e.ResultCommands;       
  
}

GenInitSubst-Cond {
  s.ContextTop (e.FuncName) e.Pattern
    = s.ContextTop : s.0
    = <Add s.ContextTop 1> : s.1
    = <Add s.ContextTop 2> : s.2
    = <Add s.ContextTop 4> : s.4
    = <Add s.ContextTop 5> : s.5
    = s.5
      (#Junk (#TkOpenCall s.0) (#TkName e.FuncName s.4))
      (#E s.2 e.Pattern)
      (#Junk (#TkCloseCall s.1))
      (
        (#CmdCallSave #AlgLeft s.0 s.2)
      );
}
